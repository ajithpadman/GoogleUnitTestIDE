#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5485
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;



public partial class GUnitDB : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertArguments(Arguments instance);
  partial void UpdateArguments(Arguments instance);
  partial void DeleteArguments(Arguments instance);
  partial void InsertArithmeticType(ArithmeticType instance);
  partial void UpdateArithmeticType(ArithmeticType instance);
  partial void DeleteArithmeticType(ArithmeticType instance);
  partial void InsertClasses(Classes instance);
  partial void UpdateClasses(Classes instance);
  partial void DeleteClasses(Classes instance);
  partial void InsertDataType(DataType instance);
  partial void UpdateDataType(DataType instance);
  partial void DeleteDataType(DataType instance);
  partial void InsertEnumType(EnumType instance);
  partial void UpdateEnumType(EnumType instance);
  partial void DeleteEnumType(EnumType instance);
  partial void InsertEnumValues(EnumValues instance);
  partial void UpdateEnumValues(EnumValues instance);
  partial void DeleteEnumValues(EnumValues instance);
  partial void InsertGlobalMethods(GlobalMethods instance);
  partial void UpdateGlobalMethods(GlobalMethods instance);
  partial void DeleteGlobalMethods(GlobalMethods instance);
  partial void InsertGlobalVariables(GlobalVariables instance);
  partial void UpdateGlobalVariables(GlobalVariables instance);
  partial void DeleteGlobalVariables(GlobalVariables instance);
  partial void InsertMemberMethods(MemberMethods instance);
  partial void UpdateMemberMethods(MemberMethods instance);
  partial void DeleteMemberMethods(MemberMethods instance);
  partial void InsertMemberVariables(MemberVariables instance);
  partial void UpdateMemberVariables(MemberVariables instance);
  partial void DeleteMemberVariables(MemberVariables instance);
  partial void InsertMethodCalls(MethodCalls instance);
  partial void UpdateMethodCalls(MethodCalls instance);
  partial void DeleteMethodCalls(MethodCalls instance);
  partial void InsertMethods(Methods instance);
  partial void UpdateMethods(Methods instance);
  partial void DeleteMethods(Methods instance);
  partial void InsertNamespaces(Namespaces instance);
  partial void UpdateNamespaces(Namespaces instance);
  partial void DeleteNamespaces(Namespaces instance);
  partial void InsertPointerType(PointerType instance);
  partial void UpdatePointerType(PointerType instance);
  partial void DeletePointerType(PointerType instance);
  partial void InsertProjectFiles(ProjectFiles instance);
  partial void UpdateProjectFiles(ProjectFiles instance);
  partial void DeleteProjectFiles(ProjectFiles instance);
  partial void InsertRecordType(RecordType instance);
  partial void UpdateRecordType(RecordType instance);
  partial void DeleteRecordType(RecordType instance);
  partial void InsertReferenceType(ReferenceType instance);
  partial void UpdateReferenceType(ReferenceType instance);
  partial void DeleteReferenceType(ReferenceType instance);
  partial void InsertStructure(Structure instance);
  partial void UpdateStructure(Structure instance);
  partial void DeleteStructure(Structure instance);
  partial void InsertStructureFields(StructureFields instance);
  partial void UpdateStructureFields(StructureFields instance);
  partial void DeleteStructureFields(StructureFields instance);
  partial void InsertTypedef(Typedef instance);
  partial void UpdateTypedef(Typedef instance);
  partial void DeleteTypedef(Typedef instance);
  partial void InsertVariables(Variables instance);
  partial void UpdateVariables(Variables instance);
  partial void DeleteVariables(Variables instance);
  #endregion
	
	public GUnitDB(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GUnitDB(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GUnitDB(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public GUnitDB(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<Arguments> Arguments
	{
		get
		{
			return this.GetTable<Arguments>();
		}
	}
	
	public System.Data.Linq.Table<ArithmeticType> ArithmeticType
	{
		get
		{
			return this.GetTable<ArithmeticType>();
		}
	}
	
	public System.Data.Linq.Table<Classes> Classes
	{
		get
		{
			return this.GetTable<Classes>();
		}
	}
	
	public System.Data.Linq.Table<DataType> DataType
	{
		get
		{
			return this.GetTable<DataType>();
		}
	}
	
	public System.Data.Linq.Table<EnumType> EnumType
	{
		get
		{
			return this.GetTable<EnumType>();
		}
	}
	
	public System.Data.Linq.Table<EnumValues> EnumValues
	{
		get
		{
			return this.GetTable<EnumValues>();
		}
	}
	
	public System.Data.Linq.Table<GlobalMethods> GlobalMethods
	{
		get
		{
			return this.GetTable<GlobalMethods>();
		}
	}
	
	public System.Data.Linq.Table<GlobalVariables> GlobalVariables
	{
		get
		{
			return this.GetTable<GlobalVariables>();
		}
	}
	
	public System.Data.Linq.Table<MemberMethods> MemberMethods
	{
		get
		{
			return this.GetTable<MemberMethods>();
		}
	}
	
	public System.Data.Linq.Table<MemberVariables> MemberVariables
	{
		get
		{
			return this.GetTable<MemberVariables>();
		}
	}
	
	public System.Data.Linq.Table<MethodCalls> MethodCalls
	{
		get
		{
			return this.GetTable<MethodCalls>();
		}
	}
	
	public System.Data.Linq.Table<Methods> Methods
	{
		get
		{
			return this.GetTable<Methods>();
		}
	}
	
	public System.Data.Linq.Table<Namespaces> Namespaces
	{
		get
		{
			return this.GetTable<Namespaces>();
		}
	}
	
	public System.Data.Linq.Table<PointerType> PointerType
	{
		get
		{
			return this.GetTable<PointerType>();
		}
	}
	
	public System.Data.Linq.Table<ProjectFiles> ProjectFiles
	{
		get
		{
			return this.GetTable<ProjectFiles>();
		}
	}
	
	public System.Data.Linq.Table<RecordType> RecordType
	{
		get
		{
			return this.GetTable<RecordType>();
		}
	}
	
	public System.Data.Linq.Table<ReferenceType> ReferenceType
	{
		get
		{
			return this.GetTable<ReferenceType>();
		}
	}
	
	public System.Data.Linq.Table<Structure> Structure
	{
		get
		{
			return this.GetTable<Structure>();
		}
	}
	
	public System.Data.Linq.Table<StructureFields> StructureFields
	{
		get
		{
			return this.GetTable<StructureFields>();
		}
	}
	
	public System.Data.Linq.Table<Typedef> Typedef
	{
		get
		{
			return this.GetTable<Typedef>();
		}
	}
	
	public System.Data.Linq.Table<Variables> Variables
	{
		get
		{
			return this.GetTable<Variables>();
		}
	}
}

[Table()]
public partial class Arguments : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Type;
	
	private int _MethodID;
	
	private EntityRef<GlobalMethods> _GlobalMethods;
	
	private EntityRef<Methods> _Methods;
	
	private EntityRef<DataType> _DataType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    #endregion
	
	public Arguments()
	{
		this._GlobalMethods = default(EntityRef<GlobalMethods>);
		this._Methods = default(EntityRef<Methods>);
		this._DataType = default(EntityRef<DataType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_MethodID", DbType="Int NOT NULL")]
	public int MethodID
	{
		get
		{
			return this._MethodID;
		}
		set
		{
			if ((this._MethodID != value))
			{
				if (this._GlobalMethods.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMethodIDChanging(value);
				this.SendPropertyChanging();
				this._MethodID = value;
				this.SendPropertyChanged("MethodID");
				this.OnMethodIDChanged();
			}
		}
	}
	
	[Association(Name="FK_Parameters_Methods", Storage="_GlobalMethods", ThisKey="MethodID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public GlobalMethods GlobalMethods
	{
		get
		{
			return this._GlobalMethods.Entity;
		}
		set
		{
			GlobalMethods previousValue = this._GlobalMethods.Entity;
			if (((previousValue != value) 
						|| (this._GlobalMethods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GlobalMethods.Entity = null;
					previousValue.Arguments.Remove(this);
				}
				this._GlobalMethods.Entity = value;
				if ((value != null))
				{
					value.Arguments.Add(this);
					this._MethodID = value.ID;
				}
				else
				{
					this._MethodID = default(int);
				}
				this.SendPropertyChanged("GlobalMethods");
			}
		}
	}
	
	[Association(Name="FK_Parameters_Methods", Storage="_Methods", ThisKey="MethodID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Methods Methods
	{
		get
		{
			return this._Methods.Entity;
		}
		set
		{
			Methods previousValue = this._Methods.Entity;
			if (((previousValue != value) 
						|| (this._Methods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Methods.Entity = null;
					previousValue.Arguments.Remove(this);
				}
				this._Methods.Entity = value;
				if ((value != null))
				{
					value.Arguments.Add(this);
					this._MethodID = value.ID;
				}
				else
				{
					this._MethodID = default(int);
				}
				this.SendPropertyChanged("Methods");
			}
		}
	}
	
	[Association(Name="FK_Parameters_Type", Storage="_DataType", ThisKey="Type", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.Arguments.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.Arguments.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class ArithmeticType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _MaxValue;
	
	private string _MinValue;
	
	private int _Type;
	
	private EntityRef<DataType> _DataType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMaxValueChanging(string value);
    partial void OnMaxValueChanged();
    partial void OnMinValueChanging(string value);
    partial void OnMinValueChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
	
	public ArithmeticType()
	{
		this._DataType = default(EntityRef<DataType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_MaxValue", DbType="NVarChar(500)")]
	public string MaxValue
	{
		get
		{
			return this._MaxValue;
		}
		set
		{
			if ((this._MaxValue != value))
			{
				this.OnMaxValueChanging(value);
				this.SendPropertyChanging();
				this._MaxValue = value;
				this.SendPropertyChanged("MaxValue");
				this.OnMaxValueChanged();
			}
		}
	}
	
	[Column(Storage="_MinValue", DbType="NVarChar(500)")]
	public string MinValue
	{
		get
		{
			return this._MinValue;
		}
		set
		{
			if ((this._MinValue != value))
			{
				this.OnMinValueChanging(value);
				this.SendPropertyChanging();
				this._MinValue = value;
				this.SendPropertyChanged("MinValue");
				this.OnMinValueChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="FK_ArithmeticType_Type", Storage="_DataType", ThisKey="Type", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.ArithmeticType.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.ArithmeticType.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Classes : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EntityName;
	
	private string _FilePath;
	
	private int _Line;
	
	private int _ColumnNo;
	
	private System.Nullable<int> _FileID;
	
	private System.Nullable<int> _Type;
	
	private EntityRef<ProjectFiles> _ProjectFiles;
	
	private EntityRef<RecordType> _RecordType;
	
	private EntitySet<MemberMethods> _MemberMethods;
	
	private EntitySet<MemberVariables> _MemberVariables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnLineChanging(int value);
    partial void OnLineChanged();
    partial void OnColumnNoChanging(int value);
    partial void OnColumnNoChanged();
    partial void OnFileIDChanging(System.Nullable<int> value);
    partial void OnFileIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
	
	public Classes()
	{
		this._ProjectFiles = default(EntityRef<ProjectFiles>);
		this._RecordType = default(EntityRef<RecordType>);
		this._MemberMethods = new EntitySet<MemberMethods>(new Action<MemberMethods>(this.attach_MemberMethods), new Action<MemberMethods>(this.detach_MemberMethods));
		this._MemberVariables = new EntitySet<MemberVariables>(new Action<MemberVariables>(this.attach_MemberVariables), new Action<MemberVariables>(this.detach_MemberVariables));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EntityName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string EntityName
	{
		get
		{
			return this._EntityName;
		}
		set
		{
			if ((this._EntityName != value))
			{
				this.OnEntityNameChanging(value);
				this.SendPropertyChanging();
				this._EntityName = value;
				this.SendPropertyChanged("EntityName");
				this.OnEntityNameChanged();
			}
		}
	}
	
	[Column(Storage="_FilePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_Line", DbType="Int NOT NULL")]
	public int Line
	{
		get
		{
			return this._Line;
		}
		set
		{
			if ((this._Line != value))
			{
				this.OnLineChanging(value);
				this.SendPropertyChanging();
				this._Line = value;
				this.SendPropertyChanged("Line");
				this.OnLineChanged();
			}
		}
	}
	
	[Column(Storage="_ColumnNo", DbType="Int NOT NULL")]
	public int ColumnNo
	{
		get
		{
			return this._ColumnNo;
		}
		set
		{
			if ((this._ColumnNo != value))
			{
				this.OnColumnNoChanging(value);
				this.SendPropertyChanging();
				this._ColumnNo = value;
				this.SendPropertyChanged("ColumnNo");
				this.OnColumnNoChanged();
			}
		}
	}
	
	[Column(Storage="_FileID", DbType="Int")]
	public System.Nullable<int> FileID
	{
		get
		{
			return this._FileID;
		}
		set
		{
			if ((this._FileID != value))
			{
				if (this._ProjectFiles.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileIDChanging(value);
				this.SendPropertyChanging();
				this._FileID = value;
				this.SendPropertyChanged("FileID");
				this.OnFileIDChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int")]
	public System.Nullable<int> Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				if (this._RecordType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="FK_Classes_ProjectFiles", Storage="_ProjectFiles", ThisKey="FileID", OtherKey="ID", IsForeignKey=true)]
	public ProjectFiles ProjectFiles
	{
		get
		{
			return this._ProjectFiles.Entity;
		}
		set
		{
			ProjectFiles previousValue = this._ProjectFiles.Entity;
			if (((previousValue != value) 
						|| (this._ProjectFiles.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProjectFiles.Entity = null;
					previousValue.Classes.Remove(this);
				}
				this._ProjectFiles.Entity = value;
				if ((value != null))
				{
					value.Classes.Add(this);
					this._FileID = value.ID;
				}
				else
				{
					this._FileID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProjectFiles");
			}
		}
	}
	
	[Association(Name="FK_Classes_RecordType", Storage="_RecordType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
	public RecordType RecordType
	{
		get
		{
			return this._RecordType.Entity;
		}
		set
		{
			RecordType previousValue = this._RecordType.Entity;
			if (((previousValue != value) 
						|| (this._RecordType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RecordType.Entity = null;
					previousValue.Classes.Remove(this);
				}
				this._RecordType.Entity = value;
				if ((value != null))
				{
					value.Classes.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(Nullable<int>);
				}
				this.SendPropertyChanged("RecordType");
			}
		}
	}
	
	[Association(Name="FK_MemberMethods_Classes", Storage="_MemberMethods", ThisKey="ID", OtherKey="ClassID", DeleteRule="CASCADE")]
	public EntitySet<MemberMethods> MemberMethods
	{
		get
		{
			return this._MemberMethods;
		}
		set
		{
			this._MemberMethods.Assign(value);
		}
	}
	
	[Association(Name="FK_MemberVariables_Classes", Storage="_MemberVariables", ThisKey="ID", OtherKey="ClassID", DeleteRule="CASCADE")]
	public EntitySet<MemberVariables> MemberVariables
	{
		get
		{
			return this._MemberVariables;
		}
		set
		{
			this._MemberVariables.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_MemberMethods(MemberMethods entity)
	{
		this.SendPropertyChanging();
		entity.Classes = this;
	}
	
	private void detach_MemberMethods(MemberMethods entity)
	{
		this.SendPropertyChanging();
		entity.Classes = null;
	}
	
	private void attach_MemberVariables(MemberVariables entity)
	{
		this.SendPropertyChanging();
		entity.Classes = this;
	}
	
	private void detach_MemberVariables(MemberVariables entity)
	{
		this.SendPropertyChanging();
		entity.Classes = null;
	}
}

[Table()]
public partial class DataType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _TypeKind;
	
	private string _EntityName;
	
	private bool _IsConstQualified;
	
	private EntitySet<ArithmeticType> _ArithmeticType;
	
	private EntitySet<EnumType> _EnumType;
	
	private EntitySet<MethodCalls> _MethodCalls;
	
	private EntitySet<Methods> _Methods;
	
	private EntitySet<Arguments> _Arguments;
	
	private EntitySet<PointerType> _PointerType;
	
	private EntitySet<PointerType> _PointerType_Type_02;
	
	private EntitySet<RecordType> _RecordType;
	
	private EntitySet<ReferenceType> _ReferenceType;
	
	private EntitySet<ReferenceType> _ReferenceType_Type_02;
	
	private EntitySet<Typedef> _Typedef;
	
	private EntitySet<Typedef> _Typedef_Type_02;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeKindChanging(int value);
    partial void OnTypeKindChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnIsConstQualifiedChanging(bool value);
    partial void OnIsConstQualifiedChanged();
    #endregion
	
	public DataType()
	{
		this._ArithmeticType = new EntitySet<ArithmeticType>(new Action<ArithmeticType>(this.attach_ArithmeticType), new Action<ArithmeticType>(this.detach_ArithmeticType));
		this._EnumType = new EntitySet<EnumType>(new Action<EnumType>(this.attach_EnumType), new Action<EnumType>(this.detach_EnumType));
		this._MethodCalls = new EntitySet<MethodCalls>(new Action<MethodCalls>(this.attach_MethodCalls), new Action<MethodCalls>(this.detach_MethodCalls));
		this._Methods = new EntitySet<Methods>(new Action<Methods>(this.attach_Methods), new Action<Methods>(this.detach_Methods));
		this._Arguments = new EntitySet<Arguments>(new Action<Arguments>(this.attach_Arguments), new Action<Arguments>(this.detach_Arguments));
		this._PointerType = new EntitySet<PointerType>(new Action<PointerType>(this.attach_PointerType), new Action<PointerType>(this.detach_PointerType));
		this._PointerType_Type_02 = new EntitySet<PointerType>(new Action<PointerType>(this.attach_PointerType_Type_02), new Action<PointerType>(this.detach_PointerType_Type_02));
		this._RecordType = new EntitySet<RecordType>(new Action<RecordType>(this.attach_RecordType), new Action<RecordType>(this.detach_RecordType));
		this._ReferenceType = new EntitySet<ReferenceType>(new Action<ReferenceType>(this.attach_ReferenceType), new Action<ReferenceType>(this.detach_ReferenceType));
		this._ReferenceType_Type_02 = new EntitySet<ReferenceType>(new Action<ReferenceType>(this.attach_ReferenceType_Type_02), new Action<ReferenceType>(this.detach_ReferenceType_Type_02));
		this._Typedef = new EntitySet<Typedef>(new Action<Typedef>(this.attach_Typedef), new Action<Typedef>(this.detach_Typedef));
		this._Typedef_Type_02 = new EntitySet<Typedef>(new Action<Typedef>(this.attach_Typedef_Type_02), new Action<Typedef>(this.detach_Typedef_Type_02));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeKind", DbType="Int NOT NULL")]
	public int TypeKind
	{
		get
		{
			return this._TypeKind;
		}
		set
		{
			if ((this._TypeKind != value))
			{
				this.OnTypeKindChanging(value);
				this.SendPropertyChanging();
				this._TypeKind = value;
				this.SendPropertyChanged("TypeKind");
				this.OnTypeKindChanged();
			}
		}
	}
	
	[Column(Storage="_EntityName", DbType="NVarChar(500)")]
	public string EntityName
	{
		get
		{
			return this._EntityName;
		}
		set
		{
			if ((this._EntityName != value))
			{
				this.OnEntityNameChanging(value);
				this.SendPropertyChanging();
				this._EntityName = value;
				this.SendPropertyChanged("EntityName");
				this.OnEntityNameChanged();
			}
		}
	}
	
	[Column(Storage="_IsConstQualified", DbType="Bit NOT NULL")]
	public bool IsConstQualified
	{
		get
		{
			return this._IsConstQualified;
		}
		set
		{
			if ((this._IsConstQualified != value))
			{
				this.OnIsConstQualifiedChanging(value);
				this.SendPropertyChanging();
				this._IsConstQualified = value;
				this.SendPropertyChanged("IsConstQualified");
				this.OnIsConstQualifiedChanged();
			}
		}
	}
	
	[Association(Name="FK_ArithmeticType_Type", Storage="_ArithmeticType", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<ArithmeticType> ArithmeticType
	{
		get
		{
			return this._ArithmeticType;
		}
		set
		{
			this._ArithmeticType.Assign(value);
		}
	}
	
	[Association(Name="FK_Enum_Type", Storage="_EnumType", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<EnumType> EnumType
	{
		get
		{
			return this._EnumType;
		}
		set
		{
			this._EnumType.Assign(value);
		}
	}
	
	[Association(Name="FK_MethodCalls_DataType", Storage="_MethodCalls", ThisKey="ID", OtherKey="ReturnTypeObject", DeleteRule="NO ACTION")]
	public EntitySet<MethodCalls> MethodCalls
	{
		get
		{
			return this._MethodCalls;
		}
		set
		{
			this._MethodCalls.Assign(value);
		}
	}
	
	[Association(Name="FK_Methods_DataType", Storage="_Methods", ThisKey="ID", OtherKey="ReturnTypeObject", DeleteRule="NO ACTION")]
	public EntitySet<Methods> Methods
	{
		get
		{
			return this._Methods;
		}
		set
		{
			this._Methods.Assign(value);
		}
	}
	
	[Association(Name="FK_Parameters_Type", Storage="_Arguments", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<Arguments> Arguments
	{
		get
		{
			return this._Arguments;
		}
		set
		{
			this._Arguments.Assign(value);
		}
	}
	
	[Association(Name="FK_PointerType_Type", Storage="_PointerType", ThisKey="ID", OtherKey="TypeID", DeleteRule="CASCADE")]
	public EntitySet<PointerType> PointerType
	{
		get
		{
			return this._PointerType;
		}
		set
		{
			this._PointerType.Assign(value);
		}
	}
	
	[Association(Name="FK_PointerType_Type_02", Storage="_PointerType_Type_02", ThisKey="ID", OtherKey="PointerTo", DeleteRule="NO ACTION")]
	public EntitySet<PointerType> PointerType_Type_02
	{
		get
		{
			return this._PointerType_Type_02;
		}
		set
		{
			this._PointerType_Type_02.Assign(value);
		}
	}
	
	[Association(Name="FK_RecordType_Type", Storage="_RecordType", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<RecordType> RecordType
	{
		get
		{
			return this._RecordType;
		}
		set
		{
			this._RecordType.Assign(value);
		}
	}
	
	[Association(Name="FK_ReferenceType_Type", Storage="_ReferenceType", ThisKey="ID", OtherKey="TypeID", DeleteRule="CASCADE")]
	public EntitySet<ReferenceType> ReferenceType
	{
		get
		{
			return this._ReferenceType;
		}
		set
		{
			this._ReferenceType.Assign(value);
		}
	}
	
	[Association(Name="FK_ReferenceType_Type_02", Storage="_ReferenceType_Type_02", ThisKey="ID", OtherKey="ReferenceTo", DeleteRule="NO ACTION")]
	public EntitySet<ReferenceType> ReferenceType_Type_02
	{
		get
		{
			return this._ReferenceType_Type_02;
		}
		set
		{
			this._ReferenceType_Type_02.Assign(value);
		}
	}
	
	[Association(Name="FK_Typedef_Type", Storage="_Typedef", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<Typedef> Typedef
	{
		get
		{
			return this._Typedef;
		}
		set
		{
			this._Typedef.Assign(value);
		}
	}
	
	[Association(Name="FK_Typedef_Type_02", Storage="_Typedef_Type_02", ThisKey="ID", OtherKey="UnderlyingType", DeleteRule="NO ACTION")]
	public EntitySet<Typedef> Typedef_Type_02
	{
		get
		{
			return this._Typedef_Type_02;
		}
		set
		{
			this._Typedef_Type_02.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ArithmeticType(ArithmeticType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_ArithmeticType(ArithmeticType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_EnumType(EnumType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_EnumType(EnumType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_MethodCalls(MethodCalls entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_MethodCalls(MethodCalls entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_Methods(Methods entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_Methods(Methods entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_Arguments(Arguments entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_Arguments(Arguments entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_PointerType(PointerType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_PointerType(PointerType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_PointerType_Type_02(PointerType entity)
	{
		this.SendPropertyChanging();
		entity.PointerToDataType = this;
	}
	
	private void detach_PointerType_Type_02(PointerType entity)
	{
		this.SendPropertyChanging();
		entity.PointerToDataType = null;
	}
	
	private void attach_RecordType(RecordType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_RecordType(RecordType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_ReferenceType(ReferenceType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_ReferenceType(ReferenceType entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_ReferenceType_Type_02(ReferenceType entity)
	{
		this.SendPropertyChanging();
		entity.ReferenceToDataType = this;
	}
	
	private void detach_ReferenceType_Type_02(ReferenceType entity)
	{
		this.SendPropertyChanging();
		entity.ReferenceToDataType = null;
	}
	
	private void attach_Typedef(Typedef entity)
	{
		this.SendPropertyChanging();
		entity.DataType = this;
	}
	
	private void detach_Typedef(Typedef entity)
	{
		this.SendPropertyChanging();
		entity.DataType = null;
	}
	
	private void attach_Typedef_Type_02(Typedef entity)
	{
		this.SendPropertyChanging();
		entity.UnderlyingTypeDataType = this;
	}
	
	private void detach_Typedef_Type_02(Typedef entity)
	{
		this.SendPropertyChanging();
		entity.UnderlyingTypeDataType = null;
	}
}

[Table()]
public partial class EnumType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Type;
	
	private EntityRef<DataType> _DataType;
	
	private EntitySet<EnumValues> _EnumValues;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
	
	public EnumType()
	{
		this._DataType = default(EntityRef<DataType>);
		this._EnumValues = new EntitySet<EnumValues>(new Action<EnumValues>(this.attach_EnumValues), new Action<EnumValues>(this.detach_EnumValues));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="FK_Enum_Type", Storage="_DataType", ThisKey="Type", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.EnumType.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.EnumType.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_EnumValues_Enum", Storage="_EnumValues", ThisKey="ID", OtherKey="EnumID", DeleteRule="CASCADE")]
	public EntitySet<EnumValues> EnumValues
	{
		get
		{
			return this._EnumValues;
		}
		set
		{
			this._EnumValues.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_EnumValues(EnumValues entity)
	{
		this.SendPropertyChanging();
		entity.EnumType = this;
	}
	
	private void detach_EnumValues(EnumValues entity)
	{
		this.SendPropertyChanging();
		entity.EnumType = null;
	}
}

[Table()]
public partial class EnumValues : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _EnumID;
	
	private string _EnumValue;
	
	private EntityRef<EnumType> _EnumType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEnumIDChanging(int value);
    partial void OnEnumIDChanged();
    partial void OnEnumValueChanging(string value);
    partial void OnEnumValueChanged();
    #endregion
	
	public EnumValues()
	{
		this._EnumType = default(EntityRef<EnumType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EnumID", DbType="Int NOT NULL")]
	public int EnumID
	{
		get
		{
			return this._EnumID;
		}
		set
		{
			if ((this._EnumID != value))
			{
				if (this._EnumType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnEnumIDChanging(value);
				this.SendPropertyChanging();
				this._EnumID = value;
				this.SendPropertyChanged("EnumID");
				this.OnEnumIDChanged();
			}
		}
	}
	
	[Column(Storage="_EnumValue", DbType="NVarChar(500)")]
	public string EnumValue
	{
		get
		{
			return this._EnumValue;
		}
		set
		{
			if ((this._EnumValue != value))
			{
				this.OnEnumValueChanging(value);
				this.SendPropertyChanging();
				this._EnumValue = value;
				this.SendPropertyChanged("EnumValue");
				this.OnEnumValueChanged();
			}
		}
	}
	
	[Association(Name="FK_EnumValues_Enum", Storage="_EnumType", ThisKey="EnumID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public EnumType EnumType
	{
		get
		{
			return this._EnumType.Entity;
		}
		set
		{
			EnumType previousValue = this._EnumType.Entity;
			if (((previousValue != value) 
						|| (this._EnumType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._EnumType.Entity = null;
					previousValue.EnumValues.Remove(this);
				}
				this._EnumType.Entity = value;
				if ((value != null))
				{
					value.EnumValues.Add(this);
					this._EnumID = value.ID;
				}
				else
				{
					this._EnumID = default(int);
				}
				this.SendPropertyChanged("EnumType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class GlobalMethods : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _FileID;
	
	private int _MethodID;
	
	private EntityRef<GlobalMethods> _Method;
	
	private EntitySet<GlobalMethods> _GlobalMethods_Methods;
	
	private EntityRef<Methods> _Methods;
	
	private EntitySet<MemberMethods> _MemberMethods;
	
	private EntitySet<MethodCalls> _MethodCalls;
	
	private EntityRef<ProjectFiles> _ProjectFiles;
	
	private EntitySet<Arguments> _Arguments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFileIDChanging(System.Nullable<int> value);
    partial void OnFileIDChanged();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    #endregion
	
	public GlobalMethods()
	{
		this._Method = default(EntityRef<GlobalMethods>);
		this._GlobalMethods_Methods = new EntitySet<GlobalMethods>(new Action<GlobalMethods>(this.attach_GlobalMethods_Methods), new Action<GlobalMethods>(this.detach_GlobalMethods_Methods));
		this._Methods = default(EntityRef<Methods>);
		this._MemberMethods = new EntitySet<MemberMethods>(new Action<MemberMethods>(this.attach_MemberMethods), new Action<MemberMethods>(this.detach_MemberMethods));
		this._MethodCalls = new EntitySet<MethodCalls>(new Action<MethodCalls>(this.attach_MethodCalls), new Action<MethodCalls>(this.detach_MethodCalls));
		this._ProjectFiles = default(EntityRef<ProjectFiles>);
		this._Arguments = new EntitySet<Arguments>(new Action<Arguments>(this.attach_Arguments), new Action<Arguments>(this.detach_Arguments));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FileID", DbType="Int")]
	public System.Nullable<int> FileID
	{
		get
		{
			return this._FileID;
		}
		set
		{
			if ((this._FileID != value))
			{
				if (this._ProjectFiles.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileIDChanging(value);
				this.SendPropertyChanging();
				this._FileID = value;
				this.SendPropertyChanged("FileID");
				this.OnFileIDChanged();
			}
		}
	}
	
	[Column(Storage="_MethodID", DbType="Int NOT NULL")]
	public int MethodID
	{
		get
		{
			return this._MethodID;
		}
		set
		{
			if ((this._MethodID != value))
			{
				if (this._Method.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMethodIDChanging(value);
				this.SendPropertyChanging();
				this._MethodID = value;
				this.SendPropertyChanged("MethodID");
				this.OnMethodIDChanged();
			}
		}
	}
	
	[Association(Name="FK_GlobalMethods_Methods", Storage="_Method", ThisKey="MethodID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public GlobalMethods Method
	{
		get
		{
			return this._Method.Entity;
		}
		set
		{
			GlobalMethods previousValue = this._Method.Entity;
			if (((previousValue != value) 
						|| (this._Method.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Method.Entity = null;
					previousValue.GlobalMethods_Methods.Remove(this);
				}
				this._Method.Entity = value;
				if ((value != null))
				{
					value.GlobalMethods_Methods.Add(this);
					this._MethodID = value.ID;
				}
				else
				{
					this._MethodID = default(int);
				}
				this.SendPropertyChanged("Method");
			}
		}
	}
	
	[Association(Name="FK_GlobalMethods_Methods", Storage="_GlobalMethods_Methods", ThisKey="ID", OtherKey="MethodID", DeleteRule="CASCADE")]
	public EntitySet<GlobalMethods> GlobalMethods_Methods
	{
		get
		{
			return this._GlobalMethods_Methods;
		}
		set
		{
			this._GlobalMethods_Methods.Assign(value);
		}
	}
	
	[Association(Name="FK_GlobalMethods_Methods", Storage="_Methods", ThisKey="MethodID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Methods Methods
	{
		get
		{
			return this._Methods.Entity;
		}
		set
		{
			Methods previousValue = this._Methods.Entity;
			if (((previousValue != value) 
						|| (this._Methods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Methods.Entity = null;
					previousValue.GlobalMethods.Remove(this);
				}
				this._Methods.Entity = value;
				if ((value != null))
				{
					value.GlobalMethods.Add(this);
					this._MethodID = value.ID;
				}
				else
				{
					this._MethodID = default(int);
				}
				this.SendPropertyChanged("Methods");
			}
		}
	}
	
	[Association(Name="FK_MemberMethods_Methods", Storage="_MemberMethods", ThisKey="ID", OtherKey="MethodID", DeleteRule="CASCADE")]
	public EntitySet<MemberMethods> MemberMethods
	{
		get
		{
			return this._MemberMethods;
		}
		set
		{
			this._MemberMethods.Assign(value);
		}
	}
	
	[Association(Name="FK_MethodCalls_Methods", Storage="_MethodCalls", ThisKey="ID", OtherKey="CallerID", DeleteRule="CASCADE")]
	public EntitySet<MethodCalls> MethodCalls
	{
		get
		{
			return this._MethodCalls;
		}
		set
		{
			this._MethodCalls.Assign(value);
		}
	}
	
	[Association(Name="FK_Methods_ProjectFiles", Storage="_ProjectFiles", ThisKey="FileID", OtherKey="ID", IsForeignKey=true)]
	public ProjectFiles ProjectFiles
	{
		get
		{
			return this._ProjectFiles.Entity;
		}
		set
		{
			ProjectFiles previousValue = this._ProjectFiles.Entity;
			if (((previousValue != value) 
						|| (this._ProjectFiles.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProjectFiles.Entity = null;
					previousValue.GlobalMethods.Remove(this);
				}
				this._ProjectFiles.Entity = value;
				if ((value != null))
				{
					value.GlobalMethods.Add(this);
					this._FileID = value.ID;
				}
				else
				{
					this._FileID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProjectFiles");
			}
		}
	}
	
	[Association(Name="FK_Parameters_Methods", Storage="_Arguments", ThisKey="ID", OtherKey="MethodID", DeleteRule="CASCADE")]
	public EntitySet<Arguments> Arguments
	{
		get
		{
			return this._Arguments;
		}
		set
		{
			this._Arguments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_GlobalMethods_Methods(GlobalMethods entity)
	{
		this.SendPropertyChanging();
		entity.Method = this;
	}
	
	private void detach_GlobalMethods_Methods(GlobalMethods entity)
	{
		this.SendPropertyChanging();
		entity.Method = null;
	}
	
	private void attach_MemberMethods(MemberMethods entity)
	{
		this.SendPropertyChanging();
		entity.GlobalMethods = this;
	}
	
	private void detach_MemberMethods(MemberMethods entity)
	{
		this.SendPropertyChanging();
		entity.GlobalMethods = null;
	}
	
	private void attach_MethodCalls(MethodCalls entity)
	{
		this.SendPropertyChanging();
		entity.GlobalMethods = this;
	}
	
	private void detach_MethodCalls(MethodCalls entity)
	{
		this.SendPropertyChanging();
		entity.GlobalMethods = null;
	}
	
	private void attach_Arguments(Arguments entity)
	{
		this.SendPropertyChanging();
		entity.GlobalMethods = this;
	}
	
	private void detach_Arguments(Arguments entity)
	{
		this.SendPropertyChanging();
		entity.GlobalMethods = null;
	}
}

[Table()]
public partial class GlobalVariables : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _VariableID;
	
	private System.Nullable<int> _FileID;
	
	private EntityRef<GlobalVariables> _Variable;
	
	private EntitySet<GlobalVariables> _GlobalVariables_Variables;
	
	private EntityRef<Variables> _Variables;
	
	private EntitySet<MemberVariables> _MemberVariables;
	
	private EntitySet<StructureFields> _StructureFields;
	
	private EntityRef<ProjectFiles> _ProjectFiles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVariableIDChanging(int value);
    partial void OnVariableIDChanged();
    partial void OnFileIDChanging(System.Nullable<int> value);
    partial void OnFileIDChanged();
    #endregion
	
	public GlobalVariables()
	{
		this._Variable = default(EntityRef<GlobalVariables>);
		this._GlobalVariables_Variables = new EntitySet<GlobalVariables>(new Action<GlobalVariables>(this.attach_GlobalVariables_Variables), new Action<GlobalVariables>(this.detach_GlobalVariables_Variables));
		this._Variables = default(EntityRef<Variables>);
		this._MemberVariables = new EntitySet<MemberVariables>(new Action<MemberVariables>(this.attach_MemberVariables), new Action<MemberVariables>(this.detach_MemberVariables));
		this._StructureFields = new EntitySet<StructureFields>(new Action<StructureFields>(this.attach_StructureFields), new Action<StructureFields>(this.detach_StructureFields));
		this._ProjectFiles = default(EntityRef<ProjectFiles>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_VariableID", DbType="Int NOT NULL")]
	public int VariableID
	{
		get
		{
			return this._VariableID;
		}
		set
		{
			if ((this._VariableID != value))
			{
				if (this._Variable.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVariableIDChanging(value);
				this.SendPropertyChanging();
				this._VariableID = value;
				this.SendPropertyChanged("VariableID");
				this.OnVariableIDChanged();
			}
		}
	}
	
	[Column(Storage="_FileID", DbType="Int")]
	public System.Nullable<int> FileID
	{
		get
		{
			return this._FileID;
		}
		set
		{
			if ((this._FileID != value))
			{
				if (this._ProjectFiles.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileIDChanging(value);
				this.SendPropertyChanging();
				this._FileID = value;
				this.SendPropertyChanged("FileID");
				this.OnFileIDChanged();
			}
		}
	}
	
	[Association(Name="FK_GlobalVariables_Variables", Storage="_Variable", ThisKey="VariableID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public GlobalVariables Variable
	{
		get
		{
			return this._Variable.Entity;
		}
		set
		{
			GlobalVariables previousValue = this._Variable.Entity;
			if (((previousValue != value) 
						|| (this._Variable.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Variable.Entity = null;
					previousValue.GlobalVariables_Variables.Remove(this);
				}
				this._Variable.Entity = value;
				if ((value != null))
				{
					value.GlobalVariables_Variables.Add(this);
					this._VariableID = value.ID;
				}
				else
				{
					this._VariableID = default(int);
				}
				this.SendPropertyChanged("Variable");
			}
		}
	}
	
	[Association(Name="FK_GlobalVariables_Variables", Storage="_GlobalVariables_Variables", ThisKey="ID", OtherKey="VariableID", DeleteRule="CASCADE")]
	public EntitySet<GlobalVariables> GlobalVariables_Variables
	{
		get
		{
			return this._GlobalVariables_Variables;
		}
		set
		{
			this._GlobalVariables_Variables.Assign(value);
		}
	}
	
	[Association(Name="FK_GlobalVariables_Variables", Storage="_Variables", ThisKey="VariableID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Variables Variables
	{
		get
		{
			return this._Variables.Entity;
		}
		set
		{
			Variables previousValue = this._Variables.Entity;
			if (((previousValue != value) 
						|| (this._Variables.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Variables.Entity = null;
					previousValue.GlobalVariables.Remove(this);
				}
				this._Variables.Entity = value;
				if ((value != null))
				{
					value.GlobalVariables.Add(this);
					this._VariableID = value.ID;
				}
				else
				{
					this._VariableID = default(int);
				}
				this.SendPropertyChanged("Variables");
			}
		}
	}
	
	[Association(Name="FK_MemberVariables_Variables", Storage="_MemberVariables", ThisKey="ID", OtherKey="VariableID", DeleteRule="CASCADE")]
	public EntitySet<MemberVariables> MemberVariables
	{
		get
		{
			return this._MemberVariables;
		}
		set
		{
			this._MemberVariables.Assign(value);
		}
	}
	
	[Association(Name="FK_StructureFields_Variables", Storage="_StructureFields", ThisKey="ID", OtherKey="VariableID", DeleteRule="CASCADE")]
	public EntitySet<StructureFields> StructureFields
	{
		get
		{
			return this._StructureFields;
		}
		set
		{
			this._StructureFields.Assign(value);
		}
	}
	
	[Association(Name="FK_Variables_ProjectFiles", Storage="_ProjectFiles", ThisKey="FileID", OtherKey="ID", IsForeignKey=true)]
	public ProjectFiles ProjectFiles
	{
		get
		{
			return this._ProjectFiles.Entity;
		}
		set
		{
			ProjectFiles previousValue = this._ProjectFiles.Entity;
			if (((previousValue != value) 
						|| (this._ProjectFiles.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProjectFiles.Entity = null;
					previousValue.GlobalVariables.Remove(this);
				}
				this._ProjectFiles.Entity = value;
				if ((value != null))
				{
					value.GlobalVariables.Add(this);
					this._FileID = value.ID;
				}
				else
				{
					this._FileID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProjectFiles");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_GlobalVariables_Variables(GlobalVariables entity)
	{
		this.SendPropertyChanging();
		entity.Variable = this;
	}
	
	private void detach_GlobalVariables_Variables(GlobalVariables entity)
	{
		this.SendPropertyChanging();
		entity.Variable = null;
	}
	
	private void attach_MemberVariables(MemberVariables entity)
	{
		this.SendPropertyChanging();
		entity.GlobalVariables = this;
	}
	
	private void detach_MemberVariables(MemberVariables entity)
	{
		this.SendPropertyChanging();
		entity.GlobalVariables = null;
	}
	
	private void attach_StructureFields(StructureFields entity)
	{
		this.SendPropertyChanging();
		entity.GlobalVariables = this;
	}
	
	private void detach_StructureFields(StructureFields entity)
	{
		this.SendPropertyChanging();
		entity.GlobalVariables = null;
	}
}

[Table()]
public partial class MemberMethods : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _ClassID;
	
	private int _MethodID;
	
	private bool _IsPureVirtual;
	
	private bool _IsVirtual;
	
	private bool _IsStaticCxxMethod;
	
	private EntityRef<Classes> _Classes;
	
	private EntityRef<GlobalMethods> _GlobalMethods;
	
	private EntityRef<Methods> _Methods;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnClassIDChanging(System.Nullable<int> value);
    partial void OnClassIDChanged();
    partial void OnMethodIDChanging(int value);
    partial void OnMethodIDChanged();
    partial void OnIsPureVirtualChanging(bool value);
    partial void OnIsPureVirtualChanged();
    partial void OnIsVirtualChanging(bool value);
    partial void OnIsVirtualChanged();
    partial void OnIsStaticCxxMethodChanging(bool value);
    partial void OnIsStaticCxxMethodChanged();
    #endregion
	
	public MemberMethods()
	{
		this._Classes = default(EntityRef<Classes>);
		this._GlobalMethods = default(EntityRef<GlobalMethods>);
		this._Methods = default(EntityRef<Methods>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ClassID", DbType="Int")]
	public System.Nullable<int> ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Classes.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[Column(Storage="_MethodID", DbType="Int NOT NULL")]
	public int MethodID
	{
		get
		{
			return this._MethodID;
		}
		set
		{
			if ((this._MethodID != value))
			{
				if (this._GlobalMethods.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnMethodIDChanging(value);
				this.SendPropertyChanging();
				this._MethodID = value;
				this.SendPropertyChanged("MethodID");
				this.OnMethodIDChanged();
			}
		}
	}
	
	[Column(Storage="_IsPureVirtual", DbType="Bit NOT NULL")]
	public bool IsPureVirtual
	{
		get
		{
			return this._IsPureVirtual;
		}
		set
		{
			if ((this._IsPureVirtual != value))
			{
				this.OnIsPureVirtualChanging(value);
				this.SendPropertyChanging();
				this._IsPureVirtual = value;
				this.SendPropertyChanged("IsPureVirtual");
				this.OnIsPureVirtualChanged();
			}
		}
	}
	
	[Column(Storage="_IsVirtual", DbType="Bit NOT NULL")]
	public bool IsVirtual
	{
		get
		{
			return this._IsVirtual;
		}
		set
		{
			if ((this._IsVirtual != value))
			{
				this.OnIsVirtualChanging(value);
				this.SendPropertyChanging();
				this._IsVirtual = value;
				this.SendPropertyChanged("IsVirtual");
				this.OnIsVirtualChanged();
			}
		}
	}
	
	[Column(Storage="_IsStaticCxxMethod", DbType="Bit NOT NULL")]
	public bool IsStaticCxxMethod
	{
		get
		{
			return this._IsStaticCxxMethod;
		}
		set
		{
			if ((this._IsStaticCxxMethod != value))
			{
				this.OnIsStaticCxxMethodChanging(value);
				this.SendPropertyChanging();
				this._IsStaticCxxMethod = value;
				this.SendPropertyChanged("IsStaticCxxMethod");
				this.OnIsStaticCxxMethodChanged();
			}
		}
	}
	
	[Association(Name="FK_MemberMethods_Classes", Storage="_Classes", ThisKey="ClassID", OtherKey="ID", IsForeignKey=true)]
	public Classes Classes
	{
		get
		{
			return this._Classes.Entity;
		}
		set
		{
			Classes previousValue = this._Classes.Entity;
			if (((previousValue != value) 
						|| (this._Classes.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Classes.Entity = null;
					previousValue.MemberMethods.Remove(this);
				}
				this._Classes.Entity = value;
				if ((value != null))
				{
					value.MemberMethods.Add(this);
					this._ClassID = value.ID;
				}
				else
				{
					this._ClassID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Classes");
			}
		}
	}
	
	[Association(Name="FK_MemberMethods_Methods", Storage="_GlobalMethods", ThisKey="MethodID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public GlobalMethods GlobalMethods
	{
		get
		{
			return this._GlobalMethods.Entity;
		}
		set
		{
			GlobalMethods previousValue = this._GlobalMethods.Entity;
			if (((previousValue != value) 
						|| (this._GlobalMethods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GlobalMethods.Entity = null;
					previousValue.MemberMethods.Remove(this);
				}
				this._GlobalMethods.Entity = value;
				if ((value != null))
				{
					value.MemberMethods.Add(this);
					this._MethodID = value.ID;
				}
				else
				{
					this._MethodID = default(int);
				}
				this.SendPropertyChanged("GlobalMethods");
			}
		}
	}
	
	[Association(Name="FK_MemberMethods_Methods", Storage="_Methods", ThisKey="MethodID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Methods Methods
	{
		get
		{
			return this._Methods.Entity;
		}
		set
		{
			Methods previousValue = this._Methods.Entity;
			if (((previousValue != value) 
						|| (this._Methods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Methods.Entity = null;
					previousValue.MemberMethods.Remove(this);
				}
				this._Methods.Entity = value;
				if ((value != null))
				{
					value.MemberMethods.Add(this);
					this._MethodID = value.ID;
				}
				else
				{
					this._MethodID = default(int);
				}
				this.SendPropertyChanged("Methods");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class MemberVariables : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _AccessScope;
	
	private int _ClassID;
	
	private System.Nullable<int> _VariableID;
	
	private EntityRef<Classes> _Classes;
	
	private EntityRef<GlobalVariables> _GlobalVariables;
	
	private EntityRef<Variables> _Variables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAccessScopeChanging(int value);
    partial void OnAccessScopeChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnVariableIDChanging(System.Nullable<int> value);
    partial void OnVariableIDChanged();
    #endregion
	
	public MemberVariables()
	{
		this._Classes = default(EntityRef<Classes>);
		this._GlobalVariables = default(EntityRef<GlobalVariables>);
		this._Variables = default(EntityRef<Variables>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_AccessScope", DbType="Int NOT NULL")]
	public int AccessScope
	{
		get
		{
			return this._AccessScope;
		}
		set
		{
			if ((this._AccessScope != value))
			{
				this.OnAccessScopeChanging(value);
				this.SendPropertyChanging();
				this._AccessScope = value;
				this.SendPropertyChanged("AccessScope");
				this.OnAccessScopeChanged();
			}
		}
	}
	
	[Column(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Classes.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[Column(Storage="_VariableID", DbType="Int")]
	public System.Nullable<int> VariableID
	{
		get
		{
			return this._VariableID;
		}
		set
		{
			if ((this._VariableID != value))
			{
				if (this._GlobalVariables.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVariableIDChanging(value);
				this.SendPropertyChanging();
				this._VariableID = value;
				this.SendPropertyChanged("VariableID");
				this.OnVariableIDChanged();
			}
		}
	}
	
	[Association(Name="FK_MemberVariables_Classes", Storage="_Classes", ThisKey="ClassID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Classes Classes
	{
		get
		{
			return this._Classes.Entity;
		}
		set
		{
			Classes previousValue = this._Classes.Entity;
			if (((previousValue != value) 
						|| (this._Classes.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Classes.Entity = null;
					previousValue.MemberVariables.Remove(this);
				}
				this._Classes.Entity = value;
				if ((value != null))
				{
					value.MemberVariables.Add(this);
					this._ClassID = value.ID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Classes");
			}
		}
	}
	
	[Association(Name="FK_MemberVariables_Variables", Storage="_GlobalVariables", ThisKey="VariableID", OtherKey="ID", IsForeignKey=true)]
	public GlobalVariables GlobalVariables
	{
		get
		{
			return this._GlobalVariables.Entity;
		}
		set
		{
			GlobalVariables previousValue = this._GlobalVariables.Entity;
			if (((previousValue != value) 
						|| (this._GlobalVariables.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GlobalVariables.Entity = null;
					previousValue.MemberVariables.Remove(this);
				}
				this._GlobalVariables.Entity = value;
				if ((value != null))
				{
					value.MemberVariables.Add(this);
					this._VariableID = value.ID;
				}
				else
				{
					this._VariableID = default(Nullable<int>);
				}
				this.SendPropertyChanged("GlobalVariables");
			}
		}
	}
	
	[Association(Name="FK_MemberVariables_Variables", Storage="_Variables", ThisKey="VariableID", OtherKey="ID", IsForeignKey=true)]
	public Variables Variables
	{
		get
		{
			return this._Variables.Entity;
		}
		set
		{
			Variables previousValue = this._Variables.Entity;
			if (((previousValue != value) 
						|| (this._Variables.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Variables.Entity = null;
					previousValue.MemberVariables.Remove(this);
				}
				this._Variables.Entity = value;
				if ((value != null))
				{
					value.MemberVariables.Add(this);
					this._VariableID = value.ID;
				}
				else
				{
					this._VariableID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Variables");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class MethodCalls : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EntitiyName;
	
	private string _ReturnType;
	
	private string _FilePath;
	
	private System.Nullable<int> _Line;
	
	private System.Nullable<int> _ColumnNo;
	
	private string _Parameters;
	
	private System.Nullable<int> _CallerID;
	
	private bool _IsCxxMethod;
	
	private string _ParentName;
	
	private System.Nullable<bool> _IsDefinedInParent;
	
	private string _ParentFilePath;
	
	private string _UnderlyingReturnKind;
	
	private int _ReturnTypeObject;
	
	private EntityRef<DataType> _DataType;
	
	private EntityRef<GlobalMethods> _GlobalMethods;
	
	private EntityRef<Methods> _Methods;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntitiyNameChanging(string value);
    partial void OnEntitiyNameChanged();
    partial void OnReturnTypeChanging(string value);
    partial void OnReturnTypeChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnLineChanging(System.Nullable<int> value);
    partial void OnLineChanged();
    partial void OnColumnNoChanging(System.Nullable<int> value);
    partial void OnColumnNoChanged();
    partial void OnParametersChanging(string value);
    partial void OnParametersChanged();
    partial void OnCallerIDChanging(System.Nullable<int> value);
    partial void OnCallerIDChanged();
    partial void OnIsCxxMethodChanging(bool value);
    partial void OnIsCxxMethodChanged();
    partial void OnParentNameChanging(string value);
    partial void OnParentNameChanged();
    partial void OnIsDefinedInParentChanging(System.Nullable<bool> value);
    partial void OnIsDefinedInParentChanged();
    partial void OnParentFilePathChanging(string value);
    partial void OnParentFilePathChanged();
    partial void OnUnderlyingReturnKindChanging(string value);
    partial void OnUnderlyingReturnKindChanged();
    partial void OnReturnTypeObjectChanging(int value);
    partial void OnReturnTypeObjectChanged();
    #endregion
	
	public MethodCalls()
	{
		this._DataType = default(EntityRef<DataType>);
		this._GlobalMethods = default(EntityRef<GlobalMethods>);
		this._Methods = default(EntityRef<Methods>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EntitiyName", DbType="NVarChar(500)")]
	public string EntitiyName
	{
		get
		{
			return this._EntitiyName;
		}
		set
		{
			if ((this._EntitiyName != value))
			{
				this.OnEntitiyNameChanging(value);
				this.SendPropertyChanging();
				this._EntitiyName = value;
				this.SendPropertyChanged("EntitiyName");
				this.OnEntitiyNameChanged();
			}
		}
	}
	
	[Column(Storage="_ReturnType", DbType="NVarChar(500)")]
	public string ReturnType
	{
		get
		{
			return this._ReturnType;
		}
		set
		{
			if ((this._ReturnType != value))
			{
				this.OnReturnTypeChanging(value);
				this.SendPropertyChanging();
				this._ReturnType = value;
				this.SendPropertyChanged("ReturnType");
				this.OnReturnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_FilePath", DbType="NVarChar(500)")]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_Line", DbType="Int")]
	public System.Nullable<int> Line
	{
		get
		{
			return this._Line;
		}
		set
		{
			if ((this._Line != value))
			{
				this.OnLineChanging(value);
				this.SendPropertyChanging();
				this._Line = value;
				this.SendPropertyChanged("Line");
				this.OnLineChanged();
			}
		}
	}
	
	[Column(Storage="_ColumnNo", DbType="Int")]
	public System.Nullable<int> ColumnNo
	{
		get
		{
			return this._ColumnNo;
		}
		set
		{
			if ((this._ColumnNo != value))
			{
				this.OnColumnNoChanging(value);
				this.SendPropertyChanging();
				this._ColumnNo = value;
				this.SendPropertyChanged("ColumnNo");
				this.OnColumnNoChanged();
			}
		}
	}
	
	[Column(Storage="_Parameters", DbType="NVarChar(500)")]
	public string Parameters
	{
		get
		{
			return this._Parameters;
		}
		set
		{
			if ((this._Parameters != value))
			{
				this.OnParametersChanging(value);
				this.SendPropertyChanging();
				this._Parameters = value;
				this.SendPropertyChanged("Parameters");
				this.OnParametersChanged();
			}
		}
	}
	
	[Column(Storage="_CallerID", DbType="Int")]
	public System.Nullable<int> CallerID
	{
		get
		{
			return this._CallerID;
		}
		set
		{
			if ((this._CallerID != value))
			{
				if (this._GlobalMethods.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnCallerIDChanging(value);
				this.SendPropertyChanging();
				this._CallerID = value;
				this.SendPropertyChanged("CallerID");
				this.OnCallerIDChanged();
			}
		}
	}
	
	[Column(Storage="_IsCxxMethod", DbType="Bit NOT NULL")]
	public bool IsCxxMethod
	{
		get
		{
			return this._IsCxxMethod;
		}
		set
		{
			if ((this._IsCxxMethod != value))
			{
				this.OnIsCxxMethodChanging(value);
				this.SendPropertyChanging();
				this._IsCxxMethod = value;
				this.SendPropertyChanged("IsCxxMethod");
				this.OnIsCxxMethodChanged();
			}
		}
	}
	
	[Column(Storage="_ParentName", DbType="NVarChar(500)")]
	public string ParentName
	{
		get
		{
			return this._ParentName;
		}
		set
		{
			if ((this._ParentName != value))
			{
				this.OnParentNameChanging(value);
				this.SendPropertyChanging();
				this._ParentName = value;
				this.SendPropertyChanged("ParentName");
				this.OnParentNameChanged();
			}
		}
	}
	
	[Column(Storage="_IsDefinedInParent", DbType="Bit")]
	public System.Nullable<bool> IsDefinedInParent
	{
		get
		{
			return this._IsDefinedInParent;
		}
		set
		{
			if ((this._IsDefinedInParent != value))
			{
				this.OnIsDefinedInParentChanging(value);
				this.SendPropertyChanging();
				this._IsDefinedInParent = value;
				this.SendPropertyChanged("IsDefinedInParent");
				this.OnIsDefinedInParentChanged();
			}
		}
	}
	
	[Column(Storage="_ParentFilePath", DbType="NVarChar(500)")]
	public string ParentFilePath
	{
		get
		{
			return this._ParentFilePath;
		}
		set
		{
			if ((this._ParentFilePath != value))
			{
				this.OnParentFilePathChanging(value);
				this.SendPropertyChanging();
				this._ParentFilePath = value;
				this.SendPropertyChanged("ParentFilePath");
				this.OnParentFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_UnderlyingReturnKind", DbType="NVarChar(500)")]
	public string UnderlyingReturnKind
	{
		get
		{
			return this._UnderlyingReturnKind;
		}
		set
		{
			if ((this._UnderlyingReturnKind != value))
			{
				this.OnUnderlyingReturnKindChanging(value);
				this.SendPropertyChanging();
				this._UnderlyingReturnKind = value;
				this.SendPropertyChanged("UnderlyingReturnKind");
				this.OnUnderlyingReturnKindChanged();
			}
		}
	}
	
	[Column(Storage="_ReturnTypeObject", DbType="Int NOT NULL")]
	public int ReturnTypeObject
	{
		get
		{
			return this._ReturnTypeObject;
		}
		set
		{
			if ((this._ReturnTypeObject != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReturnTypeObjectChanging(value);
				this.SendPropertyChanging();
				this._ReturnTypeObject = value;
				this.SendPropertyChanged("ReturnTypeObject");
				this.OnReturnTypeObjectChanged();
			}
		}
	}
	
	[Association(Name="FK_MethodCalls_DataType", Storage="_DataType", ThisKey="ReturnTypeObject", OtherKey="ID", IsForeignKey=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.MethodCalls.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.MethodCalls.Add(this);
					this._ReturnTypeObject = value.ID;
				}
				else
				{
					this._ReturnTypeObject = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_MethodCalls_Methods", Storage="_GlobalMethods", ThisKey="CallerID", OtherKey="ID", IsForeignKey=true)]
	public GlobalMethods GlobalMethods
	{
		get
		{
			return this._GlobalMethods.Entity;
		}
		set
		{
			GlobalMethods previousValue = this._GlobalMethods.Entity;
			if (((previousValue != value) 
						|| (this._GlobalMethods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GlobalMethods.Entity = null;
					previousValue.MethodCalls.Remove(this);
				}
				this._GlobalMethods.Entity = value;
				if ((value != null))
				{
					value.MethodCalls.Add(this);
					this._CallerID = value.ID;
				}
				else
				{
					this._CallerID = default(Nullable<int>);
				}
				this.SendPropertyChanged("GlobalMethods");
			}
		}
	}
	
	[Association(Name="FK_MethodCalls_Methods", Storage="_Methods", ThisKey="CallerID", OtherKey="ID", IsForeignKey=true)]
	public Methods Methods
	{
		get
		{
			return this._Methods.Entity;
		}
		set
		{
			Methods previousValue = this._Methods.Entity;
			if (((previousValue != value) 
						|| (this._Methods.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Methods.Entity = null;
					previousValue.MethodCalls.Remove(this);
				}
				this._Methods.Entity = value;
				if ((value != null))
				{
					value.MethodCalls.Add(this);
					this._CallerID = value.ID;
				}
				else
				{
					this._CallerID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Methods");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Methods : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EntityName;
	
	private string _ReturnType;
	
	private string _Parameters;
	
	private System.Nullable<int> _AccessScope;
	
	private System.Nullable<int> _StorageClass;
	
	private bool _IsDefined;
	
	private bool _IsConstMethod;
	
	private string _FilePath;
	
	private int _ColumnNo;
	
	private int _Line;
	
	private string _UnderlyingParamKind;
	
	private string _UnderlyingReturnKind;
	
	private int _ReturnTypeObject;
	
	private EntitySet<GlobalMethods> _GlobalMethods;
	
	private EntitySet<MemberMethods> _MemberMethods;
	
	private EntitySet<MethodCalls> _MethodCalls;
	
	private EntityRef<DataType> _DataType;
	
	private EntitySet<Arguments> _Arguments;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnReturnTypeChanging(string value);
    partial void OnReturnTypeChanged();
    partial void OnParametersChanging(string value);
    partial void OnParametersChanged();
    partial void OnAccessScopeChanging(System.Nullable<int> value);
    partial void OnAccessScopeChanged();
    partial void OnStorageClassChanging(System.Nullable<int> value);
    partial void OnStorageClassChanged();
    partial void OnIsDefinedChanging(bool value);
    partial void OnIsDefinedChanged();
    partial void OnIsConstMethodChanging(bool value);
    partial void OnIsConstMethodChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnColumnNoChanging(int value);
    partial void OnColumnNoChanged();
    partial void OnLineChanging(int value);
    partial void OnLineChanged();
    partial void OnUnderlyingParamKindChanging(string value);
    partial void OnUnderlyingParamKindChanged();
    partial void OnUnderlyingReturnKindChanging(string value);
    partial void OnUnderlyingReturnKindChanged();
    partial void OnReturnTypeObjectChanging(int value);
    partial void OnReturnTypeObjectChanged();
    #endregion
	
	public Methods()
	{
		this._GlobalMethods = new EntitySet<GlobalMethods>(new Action<GlobalMethods>(this.attach_GlobalMethods), new Action<GlobalMethods>(this.detach_GlobalMethods));
		this._MemberMethods = new EntitySet<MemberMethods>(new Action<MemberMethods>(this.attach_MemberMethods), new Action<MemberMethods>(this.detach_MemberMethods));
		this._MethodCalls = new EntitySet<MethodCalls>(new Action<MethodCalls>(this.attach_MethodCalls), new Action<MethodCalls>(this.detach_MethodCalls));
		this._DataType = default(EntityRef<DataType>);
		this._Arguments = new EntitySet<Arguments>(new Action<Arguments>(this.attach_Arguments), new Action<Arguments>(this.detach_Arguments));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EntityName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string EntityName
	{
		get
		{
			return this._EntityName;
		}
		set
		{
			if ((this._EntityName != value))
			{
				this.OnEntityNameChanging(value);
				this.SendPropertyChanging();
				this._EntityName = value;
				this.SendPropertyChanged("EntityName");
				this.OnEntityNameChanged();
			}
		}
	}
	
	[Column(Storage="_ReturnType", DbType="NVarChar(255)")]
	public string ReturnType
	{
		get
		{
			return this._ReturnType;
		}
		set
		{
			if ((this._ReturnType != value))
			{
				this.OnReturnTypeChanging(value);
				this.SendPropertyChanging();
				this._ReturnType = value;
				this.SendPropertyChanged("ReturnType");
				this.OnReturnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Parameters", DbType="NVarChar(500)")]
	public string Parameters
	{
		get
		{
			return this._Parameters;
		}
		set
		{
			if ((this._Parameters != value))
			{
				this.OnParametersChanging(value);
				this.SendPropertyChanging();
				this._Parameters = value;
				this.SendPropertyChanged("Parameters");
				this.OnParametersChanged();
			}
		}
	}
	
	[Column(Storage="_AccessScope", DbType="Int")]
	public System.Nullable<int> AccessScope
	{
		get
		{
			return this._AccessScope;
		}
		set
		{
			if ((this._AccessScope != value))
			{
				this.OnAccessScopeChanging(value);
				this.SendPropertyChanging();
				this._AccessScope = value;
				this.SendPropertyChanged("AccessScope");
				this.OnAccessScopeChanged();
			}
		}
	}
	
	[Column(Storage="_StorageClass", DbType="Int")]
	public System.Nullable<int> StorageClass
	{
		get
		{
			return this._StorageClass;
		}
		set
		{
			if ((this._StorageClass != value))
			{
				this.OnStorageClassChanging(value);
				this.SendPropertyChanging();
				this._StorageClass = value;
				this.SendPropertyChanged("StorageClass");
				this.OnStorageClassChanged();
			}
		}
	}
	
	[Column(Storage="_IsDefined", DbType="Bit NOT NULL")]
	public bool IsDefined
	{
		get
		{
			return this._IsDefined;
		}
		set
		{
			if ((this._IsDefined != value))
			{
				this.OnIsDefinedChanging(value);
				this.SendPropertyChanging();
				this._IsDefined = value;
				this.SendPropertyChanged("IsDefined");
				this.OnIsDefinedChanged();
			}
		}
	}
	
	[Column(Storage="_IsConstMethod", DbType="Bit NOT NULL")]
	public bool IsConstMethod
	{
		get
		{
			return this._IsConstMethod;
		}
		set
		{
			if ((this._IsConstMethod != value))
			{
				this.OnIsConstMethodChanging(value);
				this.SendPropertyChanging();
				this._IsConstMethod = value;
				this.SendPropertyChanged("IsConstMethod");
				this.OnIsConstMethodChanged();
			}
		}
	}
	
	[Column(Storage="_FilePath", DbType="NVarChar(500)")]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_ColumnNo", DbType="Int NOT NULL")]
	public int ColumnNo
	{
		get
		{
			return this._ColumnNo;
		}
		set
		{
			if ((this._ColumnNo != value))
			{
				this.OnColumnNoChanging(value);
				this.SendPropertyChanging();
				this._ColumnNo = value;
				this.SendPropertyChanged("ColumnNo");
				this.OnColumnNoChanged();
			}
		}
	}
	
	[Column(Storage="_Line", DbType="Int NOT NULL")]
	public int Line
	{
		get
		{
			return this._Line;
		}
		set
		{
			if ((this._Line != value))
			{
				this.OnLineChanging(value);
				this.SendPropertyChanging();
				this._Line = value;
				this.SendPropertyChanged("Line");
				this.OnLineChanged();
			}
		}
	}
	
	[Column(Storage="_UnderlyingParamKind", DbType="NVarChar(500)")]
	public string UnderlyingParamKind
	{
		get
		{
			return this._UnderlyingParamKind;
		}
		set
		{
			if ((this._UnderlyingParamKind != value))
			{
				this.OnUnderlyingParamKindChanging(value);
				this.SendPropertyChanging();
				this._UnderlyingParamKind = value;
				this.SendPropertyChanged("UnderlyingParamKind");
				this.OnUnderlyingParamKindChanged();
			}
		}
	}
	
	[Column(Storage="_UnderlyingReturnKind", DbType="NVarChar(500)")]
	public string UnderlyingReturnKind
	{
		get
		{
			return this._UnderlyingReturnKind;
		}
		set
		{
			if ((this._UnderlyingReturnKind != value))
			{
				this.OnUnderlyingReturnKindChanging(value);
				this.SendPropertyChanging();
				this._UnderlyingReturnKind = value;
				this.SendPropertyChanged("UnderlyingReturnKind");
				this.OnUnderlyingReturnKindChanged();
			}
		}
	}
	
	[Column(Storage="_ReturnTypeObject", DbType="Int NOT NULL")]
	public int ReturnTypeObject
	{
		get
		{
			return this._ReturnTypeObject;
		}
		set
		{
			if ((this._ReturnTypeObject != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReturnTypeObjectChanging(value);
				this.SendPropertyChanging();
				this._ReturnTypeObject = value;
				this.SendPropertyChanged("ReturnTypeObject");
				this.OnReturnTypeObjectChanged();
			}
		}
	}
	
	[Association(Name="FK_GlobalMethods_Methods", Storage="_GlobalMethods", ThisKey="ID", OtherKey="MethodID", DeleteRule="CASCADE")]
	public EntitySet<GlobalMethods> GlobalMethods
	{
		get
		{
			return this._GlobalMethods;
		}
		set
		{
			this._GlobalMethods.Assign(value);
		}
	}
	
	[Association(Name="FK_MemberMethods_Methods", Storage="_MemberMethods", ThisKey="ID", OtherKey="MethodID", DeleteRule="CASCADE")]
	public EntitySet<MemberMethods> MemberMethods
	{
		get
		{
			return this._MemberMethods;
		}
		set
		{
			this._MemberMethods.Assign(value);
		}
	}
	
	[Association(Name="FK_MethodCalls_Methods", Storage="_MethodCalls", ThisKey="ID", OtherKey="CallerID", DeleteRule="CASCADE")]
	public EntitySet<MethodCalls> MethodCalls
	{
		get
		{
			return this._MethodCalls;
		}
		set
		{
			this._MethodCalls.Assign(value);
		}
	}
	
	[Association(Name="FK_Methods_DataType", Storage="_DataType", ThisKey="ReturnTypeObject", OtherKey="ID", IsForeignKey=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.Methods.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.Methods.Add(this);
					this._ReturnTypeObject = value.ID;
				}
				else
				{
					this._ReturnTypeObject = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_Parameters_Methods", Storage="_Arguments", ThisKey="ID", OtherKey="MethodID", DeleteRule="CASCADE")]
	public EntitySet<Arguments> Arguments
	{
		get
		{
			return this._Arguments;
		}
		set
		{
			this._Arguments.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_GlobalMethods(GlobalMethods entity)
	{
		this.SendPropertyChanging();
		entity.Methods = this;
	}
	
	private void detach_GlobalMethods(GlobalMethods entity)
	{
		this.SendPropertyChanging();
		entity.Methods = null;
	}
	
	private void attach_MemberMethods(MemberMethods entity)
	{
		this.SendPropertyChanging();
		entity.Methods = this;
	}
	
	private void detach_MemberMethods(MemberMethods entity)
	{
		this.SendPropertyChanging();
		entity.Methods = null;
	}
	
	private void attach_MethodCalls(MethodCalls entity)
	{
		this.SendPropertyChanging();
		entity.Methods = this;
	}
	
	private void detach_MethodCalls(MethodCalls entity)
	{
		this.SendPropertyChanging();
		entity.Methods = null;
	}
	
	private void attach_Arguments(Arguments entity)
	{
		this.SendPropertyChanging();
		entity.Methods = this;
	}
	
	private void detach_Arguments(Arguments entity)
	{
		this.SendPropertyChanging();
		entity.Methods = null;
	}
}

[Table()]
public partial class Namespaces : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _EntityName;
	
	private string _FilePath;
	
	private int _Line;
	
	private int _ColumnNo;
	
	private System.Nullable<int> _FileID;
	
	private EntityRef<ProjectFiles> _ProjectFiles;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnLineChanging(int value);
    partial void OnLineChanged();
    partial void OnColumnNoChanging(int value);
    partial void OnColumnNoChanged();
    partial void OnFileIDChanging(System.Nullable<int> value);
    partial void OnFileIDChanged();
    #endregion
	
	public Namespaces()
	{
		this._ProjectFiles = default(EntityRef<ProjectFiles>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_EntityName", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string EntityName
	{
		get
		{
			return this._EntityName;
		}
		set
		{
			if ((this._EntityName != value))
			{
				this.OnEntityNameChanging(value);
				this.SendPropertyChanging();
				this._EntityName = value;
				this.SendPropertyChanged("EntityName");
				this.OnEntityNameChanged();
			}
		}
	}
	
	[Column(Storage="_FilePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_Line", DbType="Int NOT NULL")]
	public int Line
	{
		get
		{
			return this._Line;
		}
		set
		{
			if ((this._Line != value))
			{
				this.OnLineChanging(value);
				this.SendPropertyChanging();
				this._Line = value;
				this.SendPropertyChanged("Line");
				this.OnLineChanged();
			}
		}
	}
	
	[Column(Storage="_ColumnNo", DbType="Int NOT NULL")]
	public int ColumnNo
	{
		get
		{
			return this._ColumnNo;
		}
		set
		{
			if ((this._ColumnNo != value))
			{
				this.OnColumnNoChanging(value);
				this.SendPropertyChanging();
				this._ColumnNo = value;
				this.SendPropertyChanged("ColumnNo");
				this.OnColumnNoChanged();
			}
		}
	}
	
	[Column(Storage="_FileID", DbType="Int")]
	public System.Nullable<int> FileID
	{
		get
		{
			return this._FileID;
		}
		set
		{
			if ((this._FileID != value))
			{
				if (this._ProjectFiles.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnFileIDChanging(value);
				this.SendPropertyChanging();
				this._FileID = value;
				this.SendPropertyChanged("FileID");
				this.OnFileIDChanged();
			}
		}
	}
	
	[Association(Name="FK_Namespaces_ProjectFiles", Storage="_ProjectFiles", ThisKey="FileID", OtherKey="ID", IsForeignKey=true)]
	public ProjectFiles ProjectFiles
	{
		get
		{
			return this._ProjectFiles.Entity;
		}
		set
		{
			ProjectFiles previousValue = this._ProjectFiles.Entity;
			if (((previousValue != value) 
						|| (this._ProjectFiles.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ProjectFiles.Entity = null;
					previousValue.Namespaces.Remove(this);
				}
				this._ProjectFiles.Entity = value;
				if ((value != null))
				{
					value.Namespaces.Add(this);
					this._FileID = value.ID;
				}
				else
				{
					this._FileID = default(Nullable<int>);
				}
				this.SendPropertyChanged("ProjectFiles");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class PointerType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _PointerTo;
	
	private int _TypeID;
	
	private EntityRef<DataType> _DataType;
	
	private EntityRef<DataType> _PointerToDataType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPointerToChanging(int value);
    partial void OnPointerToChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
	
	public PointerType()
	{
		this._DataType = default(EntityRef<DataType>);
		this._PointerToDataType = default(EntityRef<DataType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_PointerTo", DbType="Int NOT NULL")]
	public int PointerTo
	{
		get
		{
			return this._PointerTo;
		}
		set
		{
			if ((this._PointerTo != value))
			{
				if (this._PointerToDataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnPointerToChanging(value);
				this.SendPropertyChanging();
				this._PointerTo = value;
				this.SendPropertyChanged("PointerTo");
				this.OnPointerToChanged();
			}
		}
	}
	
	[Column(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[Association(Name="FK_PointerType_Type", Storage="_DataType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.PointerType.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.PointerType.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_PointerType_Type_02", Storage="_PointerToDataType", ThisKey="PointerTo", OtherKey="ID", IsForeignKey=true)]
	public DataType PointerToDataType
	{
		get
		{
			return this._PointerToDataType.Entity;
		}
		set
		{
			DataType previousValue = this._PointerToDataType.Entity;
			if (((previousValue != value) 
						|| (this._PointerToDataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._PointerToDataType.Entity = null;
					previousValue.PointerType_Type_02.Remove(this);
				}
				this._PointerToDataType.Entity = value;
				if ((value != null))
				{
					value.PointerType_Type_02.Add(this);
					this._PointerTo = value.ID;
				}
				else
				{
					this._PointerTo = default(int);
				}
				this.SendPropertyChanged("PointerToDataType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class ProjectFiles : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _FilePath;
	
	private System.Nullable<System.DateTime> _LastModifiedTime;
	
	private EntitySet<Classes> _Classes;
	
	private EntitySet<GlobalMethods> _GlobalMethods;
	
	private EntitySet<Namespaces> _Namespaces;
	
	private EntitySet<GlobalVariables> _GlobalVariables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnLastModifiedTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedTimeChanged();
    #endregion
	
	public ProjectFiles()
	{
		this._Classes = new EntitySet<Classes>(new Action<Classes>(this.attach_Classes), new Action<Classes>(this.detach_Classes));
		this._GlobalMethods = new EntitySet<GlobalMethods>(new Action<GlobalMethods>(this.attach_GlobalMethods), new Action<GlobalMethods>(this.detach_GlobalMethods));
		this._Namespaces = new EntitySet<Namespaces>(new Action<Namespaces>(this.attach_Namespaces), new Action<Namespaces>(this.detach_Namespaces));
		this._GlobalVariables = new EntitySet<GlobalVariables>(new Action<GlobalVariables>(this.attach_GlobalVariables), new Action<GlobalVariables>(this.detach_GlobalVariables));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_FilePath", DbType="NVarChar(500)")]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_LastModifiedTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastModifiedTime
	{
		get
		{
			return this._LastModifiedTime;
		}
		set
		{
			if ((this._LastModifiedTime != value))
			{
				this.OnLastModifiedTimeChanging(value);
				this.SendPropertyChanging();
				this._LastModifiedTime = value;
				this.SendPropertyChanged("LastModifiedTime");
				this.OnLastModifiedTimeChanged();
			}
		}
	}
	
	[Association(Name="FK_Classes_ProjectFiles", Storage="_Classes", ThisKey="ID", OtherKey="FileID", DeleteRule="CASCADE")]
	public EntitySet<Classes> Classes
	{
		get
		{
			return this._Classes;
		}
		set
		{
			this._Classes.Assign(value);
		}
	}
	
	[Association(Name="FK_Methods_ProjectFiles", Storage="_GlobalMethods", ThisKey="ID", OtherKey="FileID", DeleteRule="CASCADE")]
	public EntitySet<GlobalMethods> GlobalMethods
	{
		get
		{
			return this._GlobalMethods;
		}
		set
		{
			this._GlobalMethods.Assign(value);
		}
	}
	
	[Association(Name="FK_Namespaces_ProjectFiles", Storage="_Namespaces", ThisKey="ID", OtherKey="FileID", DeleteRule="CASCADE")]
	public EntitySet<Namespaces> Namespaces
	{
		get
		{
			return this._Namespaces;
		}
		set
		{
			this._Namespaces.Assign(value);
		}
	}
	
	[Association(Name="FK_Variables_ProjectFiles", Storage="_GlobalVariables", ThisKey="ID", OtherKey="FileID", DeleteRule="CASCADE")]
	public EntitySet<GlobalVariables> GlobalVariables
	{
		get
		{
			return this._GlobalVariables;
		}
		set
		{
			this._GlobalVariables.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Classes(Classes entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = this;
	}
	
	private void detach_Classes(Classes entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = null;
	}
	
	private void attach_GlobalMethods(GlobalMethods entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = this;
	}
	
	private void detach_GlobalMethods(GlobalMethods entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = null;
	}
	
	private void attach_Namespaces(Namespaces entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = this;
	}
	
	private void detach_Namespaces(Namespaces entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = null;
	}
	
	private void attach_GlobalVariables(GlobalVariables entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = this;
	}
	
	private void detach_GlobalVariables(GlobalVariables entity)
	{
		this.SendPropertyChanging();
		entity.ProjectFiles = null;
	}
}

[Table()]
public partial class RecordType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _TypeKind;
	
	private int _Type;
	
	private EntitySet<Classes> _Classes;
	
	private EntityRef<DataType> _DataType;
	
	private EntitySet<Structure> _Structure;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeKindChanging(int value);
    partial void OnTypeKindChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    #endregion
	
	public RecordType()
	{
		this._Classes = new EntitySet<Classes>(new Action<Classes>(this.attach_Classes), new Action<Classes>(this.detach_Classes));
		this._DataType = default(EntityRef<DataType>);
		this._Structure = new EntitySet<Structure>(new Action<Structure>(this.attach_Structure), new Action<Structure>(this.detach_Structure));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_TypeKind", DbType="Int NOT NULL")]
	public int TypeKind
	{
		get
		{
			return this._TypeKind;
		}
		set
		{
			if ((this._TypeKind != value))
			{
				this.OnTypeKindChanging(value);
				this.SendPropertyChanging();
				this._TypeKind = value;
				this.SendPropertyChanged("TypeKind");
				this.OnTypeKindChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="FK_Classes_RecordType", Storage="_Classes", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<Classes> Classes
	{
		get
		{
			return this._Classes;
		}
		set
		{
			this._Classes.Assign(value);
		}
	}
	
	[Association(Name="FK_RecordType_Type", Storage="_DataType", ThisKey="Type", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.RecordType.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.RecordType.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_Structure_RecordType", Storage="_Structure", ThisKey="ID", OtherKey="Type", DeleteRule="CASCADE")]
	public EntitySet<Structure> Structure
	{
		get
		{
			return this._Structure;
		}
		set
		{
			this._Structure.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Classes(Classes entity)
	{
		this.SendPropertyChanging();
		entity.RecordType = this;
	}
	
	private void detach_Classes(Classes entity)
	{
		this.SendPropertyChanging();
		entity.RecordType = null;
	}
	
	private void attach_Structure(Structure entity)
	{
		this.SendPropertyChanging();
		entity.RecordType = this;
	}
	
	private void detach_Structure(Structure entity)
	{
		this.SendPropertyChanging();
		entity.RecordType = null;
	}
}

[Table()]
public partial class ReferenceType : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _ReferenceTo;
	
	private int _TypeID;
	
	private EntityRef<DataType> _DataType;
	
	private EntityRef<DataType> _ReferenceToDataType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnReferenceToChanging(int value);
    partial void OnReferenceToChanged();
    partial void OnTypeIDChanging(int value);
    partial void OnTypeIDChanged();
    #endregion
	
	public ReferenceType()
	{
		this._DataType = default(EntityRef<DataType>);
		this._ReferenceToDataType = default(EntityRef<DataType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_ReferenceTo", DbType="Int NOT NULL")]
	public int ReferenceTo
	{
		get
		{
			return this._ReferenceTo;
		}
		set
		{
			if ((this._ReferenceTo != value))
			{
				if (this._ReferenceToDataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnReferenceToChanging(value);
				this.SendPropertyChanging();
				this._ReferenceTo = value;
				this.SendPropertyChanged("ReferenceTo");
				this.OnReferenceToChanged();
			}
		}
	}
	
	[Column(Storage="_TypeID", DbType="Int NOT NULL")]
	public int TypeID
	{
		get
		{
			return this._TypeID;
		}
		set
		{
			if ((this._TypeID != value))
			{
				if (this._DataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeIDChanging(value);
				this.SendPropertyChanging();
				this._TypeID = value;
				this.SendPropertyChanged("TypeID");
				this.OnTypeIDChanged();
			}
		}
	}
	
	[Association(Name="FK_ReferenceType_Type", Storage="_DataType", ThisKey="TypeID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.ReferenceType.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.ReferenceType.Add(this);
					this._TypeID = value.ID;
				}
				else
				{
					this._TypeID = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_ReferenceType_Type_02", Storage="_ReferenceToDataType", ThisKey="ReferenceTo", OtherKey="ID", IsForeignKey=true)]
	public DataType ReferenceToDataType
	{
		get
		{
			return this._ReferenceToDataType.Entity;
		}
		set
		{
			DataType previousValue = this._ReferenceToDataType.Entity;
			if (((previousValue != value) 
						|| (this._ReferenceToDataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._ReferenceToDataType.Entity = null;
					previousValue.ReferenceType_Type_02.Remove(this);
				}
				this._ReferenceToDataType.Entity = value;
				if ((value != null))
				{
					value.ReferenceType_Type_02.Add(this);
					this._ReferenceTo = value.ID;
				}
				else
				{
					this._ReferenceTo = default(int);
				}
				this.SendPropertyChanged("ReferenceToDataType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Structure : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private System.Nullable<int> _Type;
	
	private EntityRef<RecordType> _RecordType;
	
	private EntitySet<StructureFields> _StructureFields;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    #endregion
	
	public Structure()
	{
		this._RecordType = default(EntityRef<RecordType>);
		this._StructureFields = new EntitySet<StructureFields>(new Action<StructureFields>(this.attach_StructureFields), new Action<StructureFields>(this.detach_StructureFields));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int")]
	public System.Nullable<int> Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				if (this._RecordType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Association(Name="FK_Structure_RecordType", Storage="_RecordType", ThisKey="Type", OtherKey="ID", IsForeignKey=true)]
	public RecordType RecordType
	{
		get
		{
			return this._RecordType.Entity;
		}
		set
		{
			RecordType previousValue = this._RecordType.Entity;
			if (((previousValue != value) 
						|| (this._RecordType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._RecordType.Entity = null;
					previousValue.Structure.Remove(this);
				}
				this._RecordType.Entity = value;
				if ((value != null))
				{
					value.Structure.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(Nullable<int>);
				}
				this.SendPropertyChanged("RecordType");
			}
		}
	}
	
	[Association(Name="FK_StructureFields_Structure", Storage="_StructureFields", ThisKey="ID", OtherKey="StructureID", DeleteRule="CASCADE")]
	public EntitySet<StructureFields> StructureFields
	{
		get
		{
			return this._StructureFields;
		}
		set
		{
			this._StructureFields.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_StructureFields(StructureFields entity)
	{
		this.SendPropertyChanging();
		entity.Structure = this;
	}
	
	private void detach_StructureFields(StructureFields entity)
	{
		this.SendPropertyChanging();
		entity.Structure = null;
	}
}

[Table()]
public partial class StructureFields : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _StructureID;
	
	private int _VariableID;
	
	private EntityRef<Structure> _Structure;
	
	private EntityRef<GlobalVariables> _GlobalVariables;
	
	private EntityRef<Variables> _Variables;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnStructureIDChanging(int value);
    partial void OnStructureIDChanged();
    partial void OnVariableIDChanging(int value);
    partial void OnVariableIDChanged();
    #endregion
	
	public StructureFields()
	{
		this._Structure = default(EntityRef<Structure>);
		this._GlobalVariables = default(EntityRef<GlobalVariables>);
		this._Variables = default(EntityRef<Variables>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_StructureID", DbType="Int NOT NULL")]
	public int StructureID
	{
		get
		{
			return this._StructureID;
		}
		set
		{
			if ((this._StructureID != value))
			{
				if (this._Structure.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStructureIDChanging(value);
				this.SendPropertyChanging();
				this._StructureID = value;
				this.SendPropertyChanged("StructureID");
				this.OnStructureIDChanged();
			}
		}
	}
	
	[Column(Storage="_VariableID", DbType="Int NOT NULL")]
	public int VariableID
	{
		get
		{
			return this._VariableID;
		}
		set
		{
			if ((this._VariableID != value))
			{
				if (this._GlobalVariables.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnVariableIDChanging(value);
				this.SendPropertyChanging();
				this._VariableID = value;
				this.SendPropertyChanged("VariableID");
				this.OnVariableIDChanged();
			}
		}
	}
	
	[Association(Name="FK_StructureFields_Structure", Storage="_Structure", ThisKey="StructureID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Structure Structure
	{
		get
		{
			return this._Structure.Entity;
		}
		set
		{
			Structure previousValue = this._Structure.Entity;
			if (((previousValue != value) 
						|| (this._Structure.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Structure.Entity = null;
					previousValue.StructureFields.Remove(this);
				}
				this._Structure.Entity = value;
				if ((value != null))
				{
					value.StructureFields.Add(this);
					this._StructureID = value.ID;
				}
				else
				{
					this._StructureID = default(int);
				}
				this.SendPropertyChanged("Structure");
			}
		}
	}
	
	[Association(Name="FK_StructureFields_Variables", Storage="_GlobalVariables", ThisKey="VariableID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public GlobalVariables GlobalVariables
	{
		get
		{
			return this._GlobalVariables.Entity;
		}
		set
		{
			GlobalVariables previousValue = this._GlobalVariables.Entity;
			if (((previousValue != value) 
						|| (this._GlobalVariables.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GlobalVariables.Entity = null;
					previousValue.StructureFields.Remove(this);
				}
				this._GlobalVariables.Entity = value;
				if ((value != null))
				{
					value.StructureFields.Add(this);
					this._VariableID = value.ID;
				}
				else
				{
					this._VariableID = default(int);
				}
				this.SendPropertyChanged("GlobalVariables");
			}
		}
	}
	
	[Association(Name="FK_StructureFields_Variables", Storage="_Variables", ThisKey="VariableID", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public Variables Variables
	{
		get
		{
			return this._Variables.Entity;
		}
		set
		{
			Variables previousValue = this._Variables.Entity;
			if (((previousValue != value) 
						|| (this._Variables.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Variables.Entity = null;
					previousValue.StructureFields.Remove(this);
				}
				this._Variables.Entity = value;
				if ((value != null))
				{
					value.StructureFields.Add(this);
					this._VariableID = value.ID;
				}
				else
				{
					this._VariableID = default(int);
				}
				this.SendPropertyChanged("Variables");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Typedef : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private int _Type;
	
	private int _UnderlyingType;
	
	private EntityRef<DataType> _DataType;
	
	private EntityRef<DataType> _UnderlyingTypeDataType;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(int value);
    partial void OnTypeChanged();
    partial void OnUnderlyingTypeChanging(int value);
    partial void OnUnderlyingTypeChanged();
    #endregion
	
	public Typedef()
	{
		this._DataType = default(EntityRef<DataType>);
		this._UnderlyingTypeDataType = default(EntityRef<DataType>);
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Name="type", Storage="_Type", DbType="Int NOT NULL")]
	public int Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_UnderlyingType", DbType="Int NOT NULL")]
	public int UnderlyingType
	{
		get
		{
			return this._UnderlyingType;
		}
		set
		{
			if ((this._UnderlyingType != value))
			{
				if (this._UnderlyingTypeDataType.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUnderlyingTypeChanging(value);
				this.SendPropertyChanging();
				this._UnderlyingType = value;
				this.SendPropertyChanged("UnderlyingType");
				this.OnUnderlyingTypeChanged();
			}
		}
	}
	
	[Association(Name="FK_Typedef_Type", Storage="_DataType", ThisKey="Type", OtherKey="ID", IsForeignKey=true, DeleteOnNull=true)]
	public DataType DataType
	{
		get
		{
			return this._DataType.Entity;
		}
		set
		{
			DataType previousValue = this._DataType.Entity;
			if (((previousValue != value) 
						|| (this._DataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._DataType.Entity = null;
					previousValue.Typedef.Remove(this);
				}
				this._DataType.Entity = value;
				if ((value != null))
				{
					value.Typedef.Add(this);
					this._Type = value.ID;
				}
				else
				{
					this._Type = default(int);
				}
				this.SendPropertyChanged("DataType");
			}
		}
	}
	
	[Association(Name="FK_Typedef_Type_02", Storage="_UnderlyingTypeDataType", ThisKey="UnderlyingType", OtherKey="ID", IsForeignKey=true)]
	public DataType UnderlyingTypeDataType
	{
		get
		{
			return this._UnderlyingTypeDataType.Entity;
		}
		set
		{
			DataType previousValue = this._UnderlyingTypeDataType.Entity;
			if (((previousValue != value) 
						|| (this._UnderlyingTypeDataType.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UnderlyingTypeDataType.Entity = null;
					previousValue.Typedef_Type_02.Remove(this);
				}
				this._UnderlyingTypeDataType.Entity = value;
				if ((value != null))
				{
					value.Typedef_Type_02.Add(this);
					this._UnderlyingType = value.ID;
				}
				else
				{
					this._UnderlyingType = default(int);
				}
				this.SendPropertyChanged("UnderlyingTypeDataType");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class Variables : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID;
	
	private string _VariableName;
	
	private string _VariableType;
	
	private string _FilePath;
	
	private int _ColumnNo;
	
	private int _Line;
	
	private System.Nullable<int> _StorageClass;
	
	private System.Nullable<int> _TypeKind;
	
	private EntitySet<GlobalVariables> _GlobalVariables;
	
	private EntitySet<MemberVariables> _MemberVariables;
	
	private EntitySet<StructureFields> _StructureFields;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnVariableNameChanging(string value);
    partial void OnVariableNameChanged();
    partial void OnVariableTypeChanging(string value);
    partial void OnVariableTypeChanged();
    partial void OnFilePathChanging(string value);
    partial void OnFilePathChanged();
    partial void OnColumnNoChanging(int value);
    partial void OnColumnNoChanged();
    partial void OnLineChanging(int value);
    partial void OnLineChanged();
    partial void OnStorageClassChanging(System.Nullable<int> value);
    partial void OnStorageClassChanged();
    partial void OnTypeKindChanging(System.Nullable<int> value);
    partial void OnTypeKindChanged();
    #endregion
	
	public Variables()
	{
		this._GlobalVariables = new EntitySet<GlobalVariables>(new Action<GlobalVariables>(this.attach_GlobalVariables), new Action<GlobalVariables>(this.detach_GlobalVariables));
		this._MemberVariables = new EntitySet<MemberVariables>(new Action<MemberVariables>(this.attach_MemberVariables), new Action<MemberVariables>(this.detach_MemberVariables));
		this._StructureFields = new EntitySet<StructureFields>(new Action<StructureFields>(this.attach_StructureFields), new Action<StructureFields>(this.detach_StructureFields));
		OnCreated();
	}
	
	[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int ID
	{
		get
		{
			return this._ID;
		}
		set
		{
			if ((this._ID != value))
			{
				this.OnIDChanging(value);
				this.SendPropertyChanging();
				this._ID = value;
				this.SendPropertyChanged("ID");
				this.OnIDChanged();
			}
		}
	}
	
	[Column(Storage="_VariableName", DbType="NVarChar(500)")]
	public string VariableName
	{
		get
		{
			return this._VariableName;
		}
		set
		{
			if ((this._VariableName != value))
			{
				this.OnVariableNameChanging(value);
				this.SendPropertyChanging();
				this._VariableName = value;
				this.SendPropertyChanged("VariableName");
				this.OnVariableNameChanged();
			}
		}
	}
	
	[Column(Storage="_VariableType", DbType="NVarChar(500)")]
	public string VariableType
	{
		get
		{
			return this._VariableType;
		}
		set
		{
			if ((this._VariableType != value))
			{
				this.OnVariableTypeChanging(value);
				this.SendPropertyChanging();
				this._VariableType = value;
				this.SendPropertyChanged("VariableType");
				this.OnVariableTypeChanged();
			}
		}
	}
	
	[Column(Storage="_FilePath", DbType="NVarChar(500) NOT NULL", CanBeNull=false)]
	public string FilePath
	{
		get
		{
			return this._FilePath;
		}
		set
		{
			if ((this._FilePath != value))
			{
				this.OnFilePathChanging(value);
				this.SendPropertyChanging();
				this._FilePath = value;
				this.SendPropertyChanged("FilePath");
				this.OnFilePathChanged();
			}
		}
	}
	
	[Column(Storage="_ColumnNo", DbType="Int NOT NULL")]
	public int ColumnNo
	{
		get
		{
			return this._ColumnNo;
		}
		set
		{
			if ((this._ColumnNo != value))
			{
				this.OnColumnNoChanging(value);
				this.SendPropertyChanging();
				this._ColumnNo = value;
				this.SendPropertyChanged("ColumnNo");
				this.OnColumnNoChanged();
			}
		}
	}
	
	[Column(Storage="_Line", DbType="Int NOT NULL")]
	public int Line
	{
		get
		{
			return this._Line;
		}
		set
		{
			if ((this._Line != value))
			{
				this.OnLineChanging(value);
				this.SendPropertyChanging();
				this._Line = value;
				this.SendPropertyChanged("Line");
				this.OnLineChanged();
			}
		}
	}
	
	[Column(Storage="_StorageClass", DbType="Int")]
	public System.Nullable<int> StorageClass
	{
		get
		{
			return this._StorageClass;
		}
		set
		{
			if ((this._StorageClass != value))
			{
				this.OnStorageClassChanging(value);
				this.SendPropertyChanging();
				this._StorageClass = value;
				this.SendPropertyChanged("StorageClass");
				this.OnStorageClassChanged();
			}
		}
	}
	
	[Column(Storage="_TypeKind", DbType="Int")]
	public System.Nullable<int> TypeKind
	{
		get
		{
			return this._TypeKind;
		}
		set
		{
			if ((this._TypeKind != value))
			{
				this.OnTypeKindChanging(value);
				this.SendPropertyChanging();
				this._TypeKind = value;
				this.SendPropertyChanged("TypeKind");
				this.OnTypeKindChanged();
			}
		}
	}
	
	[Association(Name="FK_GlobalVariables_Variables", Storage="_GlobalVariables", ThisKey="ID", OtherKey="VariableID", DeleteRule="CASCADE")]
	public EntitySet<GlobalVariables> GlobalVariables
	{
		get
		{
			return this._GlobalVariables;
		}
		set
		{
			this._GlobalVariables.Assign(value);
		}
	}
	
	[Association(Name="FK_MemberVariables_Variables", Storage="_MemberVariables", ThisKey="ID", OtherKey="VariableID", DeleteRule="CASCADE")]
	public EntitySet<MemberVariables> MemberVariables
	{
		get
		{
			return this._MemberVariables;
		}
		set
		{
			this._MemberVariables.Assign(value);
		}
	}
	
	[Association(Name="FK_StructureFields_Variables", Storage="_StructureFields", ThisKey="ID", OtherKey="VariableID", DeleteRule="CASCADE")]
	public EntitySet<StructureFields> StructureFields
	{
		get
		{
			return this._StructureFields;
		}
		set
		{
			this._StructureFields.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_GlobalVariables(GlobalVariables entity)
	{
		this.SendPropertyChanging();
		entity.Variables = this;
	}
	
	private void detach_GlobalVariables(GlobalVariables entity)
	{
		this.SendPropertyChanging();
		entity.Variables = null;
	}
	
	private void attach_MemberVariables(MemberVariables entity)
	{
		this.SendPropertyChanging();
		entity.Variables = this;
	}
	
	private void detach_MemberVariables(MemberVariables entity)
	{
		this.SendPropertyChanging();
		entity.Variables = null;
	}
	
	private void attach_StructureFields(StructureFields entity)
	{
		this.SendPropertyChanging();
		entity.Variables = this;
	}
	
	private void detach_StructureFields(StructureFields entity)
	{
		this.SendPropertyChanging();
		entity.Variables = null;
	}
}
#pragma warning restore 1591
