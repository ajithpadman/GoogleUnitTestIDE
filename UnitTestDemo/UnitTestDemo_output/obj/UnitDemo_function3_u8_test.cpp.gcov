        -:    0:Source:D:/UnitTestDemo/GeneratedTests_UnitTestDemo/UnitDemo_function3_u8_test.cpp
        -:    0:Graph:UnitDemo_function3_u8_test.gcno
        -:    0:Data:UnitDemo_function3_u8_test.gcda
        -:    0:Runs:15
        -:    0:Programs:1
        -:    1:/*********************************************************************/
        -:    2:/*! 
        -:    3:* \file 
        -:    4:* 
        -:    5:* \author MMEMEA\F11786B
        -:    6:* \version 1.0
        -:    7:* \date 9/15/2015 12:00:00 AM
        -:    8:*/
        -:    9:/*********************************************************************/
        -:   10:
        -:   11:/*Header Files*/
        -:   12:#include "gtest/gtest.h"
        -:   13:#include "gmock/gmock.h"
        -:   14:#include "tr1/tuple"
        -:   15:#include "limits"
        -:   16:/*Namespace References*/
        -:   17:using ::testing::TestWithParam;
        -:   18:using ::testing::Values;
        -:   19:using ::testing::Combine;
        -:   20:using ::testing::Bool;
        -:   21:using ::testing::Range;
        -:   22:using ::testing::ExitedWithCode;
        -:   23:
        -:   24:extern u8 UnitDemo_function3_u8(u16,u32);
        -:   25:/*********************************************************************/
        -:   26:/*! 
        -:   27:*  \class UnitDemo_function3_u8_BoundaryFixture
        -:   28:* Boundary test Suit for method UnitDemo_function3_u8
        -:   29:* \author MMEMEA\F11786B
        -:   30:* \version 1.0
        -:   31:* \date 9/15/2015 12:00:00 AM
        -:   32:*/
        -:   33:/*********************************************************************/
        -:   34:
       12:   35:class UnitDemo_function3_u8_BoundaryFixture:public TestWithParam<std::tr1::tuple<u16,u32> >
        -:   36:{
        -:   37:public:
        -:   38:/*********************************************************************/
        -:   39:/*! 
        -:   40:* \fn void SetUp()
        -:   41:* Set up for each tests 
        -:   42:* \author MMEMEA\F11786B
        -:   43:* \version 1.0
        -:   44:* \date 9/15/2015 12:00:00 AM
        -:   45:*/
        -:   46:/*********************************************************************/
        -:   47:
        8:   48:virtual void SetUp()
        -:   49:{
        8:   50:}
        -:   51:/*********************************************************************/
        -:   52:/*! 
        -:   53:* \fn void TearDown()
        -:   54:* Tear Down each tests 
        -:   55:* \author MMEMEA\F11786B
        -:   56:* \version 1.0
        -:   57:* \date 9/15/2015 12:00:00 AM
        -:   58:*/
        -:   59:/*********************************************************************/
        -:   60:
        4:   61:virtual void TearDown()
        -:   62:{
        4:   63:}
        -:   64:};
        -:   65:/*********************************************************************/
        -:   66:/*! 
        -:   67:* \fn u16 getParamMax_0()
        -:   68:* Get the maximum value for Parameter 0
        -:   69:* \author MMEMEA\F11786B
        -:   70:* \version 1.0
        -:   71:* \date 9/15/2015 12:00:00 AM
        -:   72:*/
        -:   73:/*********************************************************************/
        -:   74:
       15:   75:static u16 getParamMax_0()
        -:   76:{
       15:   77:static unsigned short member_0_ActualType =  std::numeric_limits < unsigned short >::max();
        -:   78:
       15:   79:static u16 member_0 = member_0_ActualType;
        -:   80:
        -:   81:
       15:   82:return member_0;
        -:   83:}
        -:   84:/*********************************************************************/
        -:   85:/*! 
        -:   86:* \fn u16 getParamMin_0()
        -:   87:* Get the minimum value for Parameter 0
        -:   88:* \author MMEMEA\F11786B
        -:   89:* \version 1.0
        -:   90:* \date 9/15/2015 12:00:00 AM
        -:   91:*/
        -:   92:/*********************************************************************/
        -:   93:
       15:   94:static u16 getParamMin_0()
        -:   95:{
       15:   96:static unsigned short member_0_ActualType =  std::numeric_limits < unsigned short >::min();
        -:   97:
       15:   98:static u16 member_0 = member_0_ActualType;
        -:   99:
        -:  100:
       15:  101:return member_0;
        -:  102:}
        -:  103:/*********************************************************************/
        -:  104:/*! 
        -:  105:* \fn u32 getParamMax_1()
        -:  106:* Get the maximum value for Parameter 1
        -:  107:* \author MMEMEA\F11786B
        -:  108:* \version 1.0
        -:  109:* \date 9/15/2015 12:00:00 AM
        -:  110:*/
        -:  111:/*********************************************************************/
        -:  112:
       15:  113:static u32 getParamMax_1()
        -:  114:{
       15:  115:static unsigned int member_1_ActualType =  std::numeric_limits < unsigned int >::max();
        -:  116:
       15:  117:static u32 member_1 = member_1_ActualType;
        -:  118:
        -:  119:
       15:  120:return member_1;
        -:  121:}
        -:  122:/*********************************************************************/
        -:  123:/*! 
        -:  124:* \fn u32 getParamMin_1()
        -:  125:* Get the minimum value for Parameter 1
        -:  126:* \author MMEMEA\F11786B
        -:  127:* \version 1.0
        -:  128:* \date 9/15/2015 12:00:00 AM
        -:  129:*/
        -:  130:/*********************************************************************/
        -:  131:
       15:  132:static u32 getParamMin_1()
        -:  133:{
       15:  134:static unsigned int member_1_ActualType =  std::numeric_limits < unsigned int >::min();
        -:  135:
       15:  136:static u32 member_1 = member_1_ActualType;
        -:  137:
        -:  138:
       15:  139:return member_1;
        -:  140:}
        -:  141:/*********************************************************************/
        -:  142:/*! 
        -:  143:* \fn INSTANTIATE_TEST_CASE_P
        -:  144:* Instantiate the Test value Fixture 
        -:  145:* \author MMEMEA\F11786B
        -:  146:* \version 1.0
        -:  147:* \date 9/15/2015 12:00:00 AM
        -:  148:*/
        -:  149:/*********************************************************************/
        -:  150:
       45:  151:INSTANTIATE_TEST_CASE_P
        -:  152:(
        -:  153:UnitDemo_function3_u8_BoundaryTest_,
        -:  154:UnitDemo_function3_u8_BoundaryFixture,
        -:  155:Combine
        -:  156:(
        -:  157:Values(getParamMin_0(),getParamMax_0()),Values(getParamMin_1(),getParamMax_1())
        -:  158:)
       30:  159:);
        -:  160:/*********************************************************************/
        -:  161:/*! 
        -:  162:* \fn TEST
        -:  163:* Test case for Boundary testing Method UnitDemo_function3_u8
        -:  164:* \author MMEMEA\F11786B
        -:  165:* \version 1.0
        -:  166:* \date 9/15/2015 12:00:00 AM
        -:  167:*/
        -:  168:/*********************************************************************/
        -:  169:
       54:  170:TEST_P(UnitDemo_function3_u8_BoundaryFixture,UnitDemo_function3_u8_Test)
        -:  171:{
        8:  172:EXPECT_EXIT
        -:  173:(
        -:  174:UnitDemo_function3_u8(
        -:  175:std::tr1::get < 0 > (GetParam()),std::tr1::get < 1 > (GetParam())
        -:  176:);exit(0),ExitedWithCode(0),""
    #####:  177:);
       49:  178:}
        -:  179:
        -:  180:
        -:  181:
