        -:    0:Source:D:/UnitTestDemo/GeneratedTests_UnitTestDemo/UnitDemo_function4_b_test.cpp
        -:    0:Graph:UnitDemo_function4_b_test.gcno
        -:    0:Data:UnitDemo_function4_b_test.gcda
        -:    0:Runs:15
        -:    0:Programs:1
        -:    1:/*********************************************************************/
        -:    2:/*! 
        -:    3:* \file 
        -:    4:* 
        -:    5:* \author MMEMEA\F11786B
        -:    6:* \version 1.0
        -:    7:* \date 9/15/2015 12:00:00 AM
        -:    8:*/
        -:    9:/*********************************************************************/
        -:   10:
        -:   11:/*Header Files*/
        -:   12:#include "gtest/gtest.h"
        -:   13:#include "gmock/gmock.h"
        -:   14:#include "tr1/tuple"
        -:   15:#include "limits"
        -:   16:/*Namespace References*/
        -:   17:using ::testing::TestWithParam;
        -:   18:using ::testing::Values;
        -:   19:using ::testing::Combine;
        -:   20:using ::testing::Bool;
        -:   21:using ::testing::Range;
        -:   22:using ::testing::ExitedWithCode;
        -:   23:
        -:   24:extern Boolean UnitDemo_function4_b(u16 *,u32,u32 *);
        -:   25:/*********************************************************************/
        -:   26:/*! 
        -:   27:*  \class UnitDemo_function4_b_BoundaryFixture
        -:   28:* Boundary test Suit for method UnitDemo_function4_b
        -:   29:* \author MMEMEA\F11786B
        -:   30:* \version 1.0
        -:   31:* \date 9/15/2015 12:00:00 AM
        -:   32:*/
        -:   33:/*********************************************************************/
        -:   34:
       24:   35:class UnitDemo_function4_b_BoundaryFixture:public TestWithParam<std::tr1::tuple<u16 *,u32,u32 *> >
        -:   36:{
        -:   37:public:
        -:   38:/*********************************************************************/
        -:   39:/*! 
        -:   40:* \fn void SetUp()
        -:   41:* Set up for each tests 
        -:   42:* \author MMEMEA\F11786B
        -:   43:* \version 1.0
        -:   44:* \date 9/15/2015 12:00:00 AM
        -:   45:*/
        -:   46:/*********************************************************************/
        -:   47:
       16:   48:virtual void SetUp()
        -:   49:{
       16:   50:}
        -:   51:/*********************************************************************/
        -:   52:/*! 
        -:   53:* \fn void TearDown()
        -:   54:* Tear Down each tests 
        -:   55:* \author MMEMEA\F11786B
        -:   56:* \version 1.0
        -:   57:* \date 9/15/2015 12:00:00 AM
        -:   58:*/
        -:   59:/*********************************************************************/
        -:   60:
        8:   61:virtual void TearDown()
        -:   62:{
        8:   63:}
        -:   64:};
        -:   65:/*********************************************************************/
        -:   66:/*! 
        -:   67:* \fn u16 * getParamMax_0()
        -:   68:* Get the maximum value for Parameter 0
        -:   69:* \author MMEMEA\F11786B
        -:   70:* \version 1.0
        -:   71:* \date 9/15/2015 12:00:00 AM
        -:   72:*/
        -:   73:/*********************************************************************/
        -:   74:
       15:   75:static u16 * getParamMax_0()
        -:   76:{
       15:   77:static unsigned short member_0_ActualType_ActualType =  std::numeric_limits < unsigned short >::max();
        -:   78:
       15:   79:static u16 member_0_ActualType = member_0_ActualType_ActualType;
        -:   80:
        -:   81:
        -:   82:static u16 * member_0 = &member_0_ActualType;
        -:   83:
        -:   84:
       15:   85:return  member_0;
        -:   86:}
        -:   87:/*********************************************************************/
        -:   88:/*! 
        -:   89:* \fn u16 * getParamMin_0()
        -:   90:* Get the minimum value for Parameter 0
        -:   91:* \author MMEMEA\F11786B
        -:   92:* \version 1.0
        -:   93:* \date 9/15/2015 12:00:00 AM
        -:   94:*/
        -:   95:/*********************************************************************/
        -:   96:
       15:   97:static u16 * getParamMin_0()
        -:   98:{
       15:   99:static unsigned short member_0_ActualType_ActualType =  std::numeric_limits < unsigned short >::min();
        -:  100:
       15:  101:static u16 member_0_ActualType = member_0_ActualType_ActualType;
        -:  102:
        -:  103:
        -:  104:static u16 * member_0 = &member_0_ActualType;
        -:  105:
        -:  106:
       15:  107:return member_0;
        -:  108:}
        -:  109:/*********************************************************************/
        -:  110:/*! 
        -:  111:* \fn u32 getParamMax_1()
        -:  112:* Get the maximum value for Parameter 1
        -:  113:* \author MMEMEA\F11786B
        -:  114:* \version 1.0
        -:  115:* \date 9/15/2015 12:00:00 AM
        -:  116:*/
        -:  117:/*********************************************************************/
        -:  118:
       15:  119:static u32 getParamMax_1()
        -:  120:{
       15:  121:static unsigned int member_1_ActualType =  std::numeric_limits < unsigned int >::max();
        -:  122:
       15:  123:static u32 member_1 = member_1_ActualType;
        -:  124:
        -:  125:
       15:  126:return member_1;
        -:  127:}
        -:  128:/*********************************************************************/
        -:  129:/*! 
        -:  130:* \fn u32 getParamMin_1()
        -:  131:* Get the minimum value for Parameter 1
        -:  132:* \author MMEMEA\F11786B
        -:  133:* \version 1.0
        -:  134:* \date 9/15/2015 12:00:00 AM
        -:  135:*/
        -:  136:/*********************************************************************/
        -:  137:
       15:  138:static u32 getParamMin_1()
        -:  139:{
       15:  140:static unsigned int member_1_ActualType =  std::numeric_limits < unsigned int >::min();
        -:  141:
       15:  142:static u32 member_1 = member_1_ActualType;
        -:  143:
        -:  144:
       15:  145:return member_1;
        -:  146:}
        -:  147:/*********************************************************************/
        -:  148:/*! 
        -:  149:* \fn u32 * getParamMax_2()
        -:  150:* Get the maximum value for Parameter 2
        -:  151:* \author MMEMEA\F11786B
        -:  152:* \version 1.0
        -:  153:* \date 9/15/2015 12:00:00 AM
        -:  154:*/
        -:  155:/*********************************************************************/
        -:  156:
       15:  157:static u32 * getParamMax_2()
        -:  158:{
       15:  159:static unsigned int member_2_ActualType_ActualType =  std::numeric_limits < unsigned int >::max();
        -:  160:
       15:  161:static u32 member_2_ActualType = member_2_ActualType_ActualType;
        -:  162:
        -:  163:
        -:  164:static u32 * member_2 = &member_2_ActualType;
        -:  165:
        -:  166:
       15:  167:return  member_2;
        -:  168:}
        -:  169:/*********************************************************************/
        -:  170:/*! 
        -:  171:* \fn u32 * getParamMin_2()
        -:  172:* Get the minimum value for Parameter 2
        -:  173:* \author MMEMEA\F11786B
        -:  174:* \version 1.0
        -:  175:* \date 9/15/2015 12:00:00 AM
        -:  176:*/
        -:  177:/*********************************************************************/
        -:  178:
       15:  179:static u32 * getParamMin_2()
        -:  180:{
       15:  181:static unsigned int member_2_ActualType_ActualType =  std::numeric_limits < unsigned int >::min();
        -:  182:
       15:  183:static u32 member_2_ActualType = member_2_ActualType_ActualType;
        -:  184:
        -:  185:
        -:  186:static u32 * member_2 = &member_2_ActualType;
        -:  187:
        -:  188:
       15:  189:return member_2;
        -:  190:}
        -:  191:/*********************************************************************/
        -:  192:/*! 
        -:  193:* \fn INSTANTIATE_TEST_CASE_P
        -:  194:* Instantiate the Test value Fixture 
        -:  195:* \author MMEMEA\F11786B
        -:  196:* \version 1.0
        -:  197:* \date 9/15/2015 12:00:00 AM
        -:  198:*/
        -:  199:/*********************************************************************/
        -:  200:
       45:  201:INSTANTIATE_TEST_CASE_P
        -:  202:(
        -:  203:UnitDemo_function4_b_BoundaryTest_,
        -:  204:UnitDemo_function4_b_BoundaryFixture,
        -:  205:Combine
        -:  206:(
        -:  207:Values(getParamMin_0(),getParamMax_0()),Values(getParamMin_1(),getParamMax_1()),Values(getParamMin_2(),getParamMax_2())
        -:  208:)
       30:  209:);
        -:  210:/*********************************************************************/
        -:  211:/*! 
        -:  212:* \fn TEST
        -:  213:* Test case for Boundary testing Method UnitDemo_function4_b
        -:  214:* \author MMEMEA\F11786B
        -:  215:* \version 1.0
        -:  216:* \date 9/15/2015 12:00:00 AM
        -:  217:*/
        -:  218:/*********************************************************************/
        -:  219:
       78:  220:TEST_P(UnitDemo_function4_b_BoundaryFixture,UnitDemo_function4_b_Test)
        -:  221:{
       16:  222:EXPECT_EXIT
        -:  223:(
        -:  224:UnitDemo_function4_b(
        -:  225:std::tr1::get < 0 > (GetParam()),std::tr1::get < 1 > (GetParam()),std::tr1::get < 2 > (GetParam())
        -:  226:);exit(0),ExitedWithCode(0),""
    #####:  227:);
       53:  228:}
        -:  229:
        -:  230:
        -:  231:
